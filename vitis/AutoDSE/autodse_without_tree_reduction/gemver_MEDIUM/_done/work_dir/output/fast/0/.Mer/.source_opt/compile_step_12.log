debug mode
Warning: this is an empty file (no tokens found): not even a CR present! (but not an error using the token stream unparsing) 

 Total BRAM size is 3145728 byte.
==============================================
-----=# Memory Burst Optimization Start#=----
==============================================

lifting burst for coarse grained paralleld loop: 
lifting memory burst for general issues: 
access range for variable 'x' within scope '{#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}':  
i..i exact
access range for variable 'x' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'x' within scope '{for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}}':  
0..399 exact
access range for variable 'z' within scope '{#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}':  
i..i exact
access range for variable 'z' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'A' within scope '{#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}':  
i * 400L + j..i * 400L + j exact
access range for variable 'A' within scope 'for(j = 0;j < 400;j++) {...}':  
i * 400L..399L + i * 400L exact
access range for variable 'A' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}':  
i * 400L..399L + i * 400L exact
access range for variable 'A' within scope 'for(i = 0;i < 400;i++) {...}':  
0..159999 exact
access range for variable 'A' within scope '{for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}}':  
0..159999 exact
access range for variable 'u1' within scope '{#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}':  
i..i exact
access range for variable 'u1' within scope 'for(j = 0;j < 400;j++) {...}':  
i..i exact
access range for variable 'u1' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}':  
i..i exact
access range for variable 'u1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v1' within scope '{#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}':  
j..j exact
access range for variable 'v1' within scope 'for(j = 0;j < 400;j++) {...}':  
0..399 exact
access range for variable 'v1' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}':  
0..399 exact
access range for variable 'v1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'u2' within scope '{#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}':  
i..i exact
access range for variable 'u2' within scope 'for(j = 0;j < 400;j++) {...}':  
i..i exact
access range for variable 'u2' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}':  
i..i exact
access range for variable 'u2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v2' within scope '{#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}':  
j..j exact
access range for variable 'v2' within scope 'for(j = 0;j < 400;j++) {...}':  
0..399 exact
access range for variable 'v2' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}':  
0..399 exact
access range for variable 'v2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'x' within scope '{#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}':  
i..i exact
access range for variable 'x' within scope 'for(j = 0;j < 400;j++) {...}':  
i..i exact
access range for variable 'x' within scope '{#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}':  
i..i exact
access range for variable 'x' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'A' within scope '{#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}':  
j * 400L + i..j * 400L + i exact
access range for variable 'A' within scope 'for(j = 0;j < 400;j++) {...}':  
i..159600L + i inexact
cannot infer memory burst for variable 'A' because of inefficiency in scope 'SgForStatement:for(j = 0;j < 400;j++) {...}'
access range for variable 'A' within scope '{#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}':  
i..159600L + i inexact
cannot infer memory burst for variable 'A' because of inefficiency in scope 'SgBasicBlock:{#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx...'
access range for variable 'A' within scope 'for(i = 0;i < 400;i++) {...}':  
0..159999 exact
access range for variable 'y' within scope '{#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}':  
j..j exact
access range for variable 'y' within scope 'for(j = 0;j < 400;j++) {...}':  
0..399 exact
access range for variable 'y' within scope '{#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}':  
0..399 exact
access range for variable 'y' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'w' within scope '{#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}':  
i..i exact
access range for variable 'w' within scope 'for(j = 0;j < 400;j++) {...}':  
i..i exact
access range for variable 'w' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}':  
i..i exact
access range for variable 'w' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'A' within scope '{#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}':  
i * 400L + j..i * 400L + j exact
access range for variable 'A' within scope 'for(j = 0;j < 400;j++) {...}':  
i * 400L..399L + i * 400L exact
access range for variable 'A' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}':  
i * 400L..399L + i * 400L exact
access range for variable 'A' within scope 'for(i = 0;i < 400;i++) {...}':  
0..159999 exact
access range for variable 'x' within scope '{#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}':  
j..j exact
access range for variable 'x' within scope 'for(j = 0;j < 400;j++) {...}':  
0..399 exact
access range for variable 'x' within scope '{#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}':  
0..399 exact
access range for variable 'x' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'x' within scope '{for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}}':  
0..399 exact
access range for variable 'x' within scope '{for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx[i] = x[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x[j];}}}':  
0..399 exact
Memory burst inferred: variable 'x' for GENERAL (__merlinkernel_kernel_gemver.c)
  burst buffer size = 1600 bytes
access range for variable 'A' within scope '{float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x_buf[j];}}memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);}':  
0..159999 exact
access range for variable 'A' within scope '{float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA[i * 400L + j] = A[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A[j * 400L + i] * y[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw[i] = w[i] + alpha * A[i * 400L + j] * x_buf[j];}}memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);}':  
0..159999 exact
Memory burst inferred: variable 'A' for GENERAL (__merlinkernel_kernel_gemver.c)
  burst buffer size = 640000 bytes
access range for variable 'z' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'z' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'u1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'u1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v1' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'u2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'u2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'v2' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'x' within scope 'for(i = 0;i < 400;i++) {...}':  
na..na inexact
Cannot infer burst for variable 'x' in scope 'SgForStatement:for(i = 0;i < 400;i++) {...}' because of infinite bound
access range for variable 'A' within scope 'for(i = 0;i < 400;i++) {...}':  
na..na inexact
Cannot infer burst for variable 'A' in scope 'SgForStatement:for(i = 0;i < 400;i++) {...}' because of infinite bound
access range for variable 'y' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'y' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'w' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
access range for variable 'w' within scope 'for(i = 0;i < 400;i++) {...}':  
0..399 exact
Memory burst inferred: variable 'w' for GENERAL (__merlinkernel_kernel_gemver.c)
  burst buffer size = 1600 bytes
access range for variable 'A' within scope 'for(i = 0;i < 400;i++) {...}':  
na..na inexact
Cannot infer burst for variable 'A' in scope 'SgForStatement:for(i = 0;i < 400;i++) {...}' because of infinite bound
access range for variable 'x' within scope 'for(i = 0;i < 400;i++) {...}':  
na..na inexact
Cannot infer burst for variable 'x' in scope 'SgForStatement:for(i = 0;i < 400;i++) {...}' because of infinite bound
parent pipeline found
parent pipeline found
[MARS-BURST-MSG] Read to array/pointer 'y' .
[MARS-BURST-PARSING] Burst inference granularity of array 'y' is depends on loop iterator 1
[MARS-BURST-MSG] Intra loop data reuse can be achieved by MARS burst inference.
[MARS-BURST-PARSING] Burst inference location of array 'y' is -1, lifted by 1 level 
[MARS-BURST-PARSING] Burst inference buffer size of array 'y' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1[i] * v1[j] + u2[i] * v2[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
parent pipeline found
parent pipeline found
[MARS-BURST-MSG] Read to array/pointer 'u1' .
[MARS-BURST-PARSING] Burst inference granularity of array 'u1' is depends on loop iterator 0
[MARS-BURST-PARSING] Burst inference buffer size of array 'u1' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float u1_6_0_buf[400];float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);{memcpy((void *)(&u1_6_0_buf[0]),(const void *)(&u1[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1_6_0_buf[i] * v1[j] + u2[i] * v2[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
[MARS-BURST-MSG] Read to array/pointer 'v1' .
[MARS-BURST-PARSING] Burst inference granularity of array 'v1' is depends on loop iterator 0
[MARS-BURST-PARSING] Burst inference buffer size of array 'v1' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float v1_6_0_buf[400];float u1_6_0_buf[400];float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);{memcpy((void *)(&u1_6_0_buf[0]),(const void *)(&u1[0]),sizeof(float ) * 400);}{memcpy((void *)(&v1_6_0_buf[0]),(const void *)(&v1[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1_6_0_buf[i] * v1_6_0_buf[j] + u2[i] * v2[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
[MARS-BURST-MSG] Read to array/pointer 'u2' .
[MARS-BURST-PARSING] Burst inference granularity of array 'u2' is depends on loop iterator 0
[MARS-BURST-PARSING] Burst inference buffer size of array 'u2' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float u2_6_0_buf[400];float v1_6_0_buf[400];float u1_6_0_buf[400];float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);{memcpy((void *)(&u1_6_0_buf[0]),(const void *)(&u1[0]),sizeof(float ) * 400);}{memcpy((void *)(&v1_6_0_buf[0]),(const void *)(&v1[0]),sizeof(float ) * 400);}{memcpy((void *)(&u2_6_0_buf[0]),(const void *)(&u2[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1_6_0_buf[i] * v1_6_0_buf[j] + u2_6_0_buf[i] * v2[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
[MARS-BURST-MSG] Read to array/pointer 'v2' .
[MARS-BURST-PARSING] Burst inference granularity of array 'v2' is depends on loop iterator 0
[MARS-BURST-PARSING] Burst inference buffer size of array 'v2' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float v2_6_0_buf[400];float u2_6_0_buf[400];float v1_6_0_buf[400];float u1_6_0_buf[400];float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);{memcpy((void *)(&u1_6_0_buf[0]),(const void *)(&u1[0]),sizeof(float ) * 400);}{memcpy((void *)(&v1_6_0_buf[0]),(const void *)(&v1[0]),sizeof(float ) * 400);}{memcpy((void *)(&u2_6_0_buf[0]),(const void *)(&u2[0]),sizeof(float ) * 400);}{memcpy((void *)(&v2_6_0_buf[0]),(const void *)(&v2[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1_6_0_buf[i] * v1_6_0_buf[j] + u2_6_0_buf[i] * v2_6_0_buf[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
parent pipeline found
parent pipeline found
[MARS-BURST-MSG] Read to array/pointer 'z' .
[MARS-BURST-PARSING] Burst inference granularity of array 'z' is depends on loop iterator 0
[MARS-BURST-PARSING] Burst inference buffer size of array 'z' is 400
{#pragma ACCEL interface variable=z depth=400 max_depth=400#pragma ACCEL interface variable=y depth=400 max_depth=400#pragma ACCEL interface variable=x depth=400 max_depth=400#pragma ACCEL interface variable=w depth=400 max_depth=400#pragma ACCEL interface variable=v2 depth=400 max_depth=400#pragma ACCEL interface variable=u2 depth=400 max_depth=400#pragma ACCEL interface variable=v1 depth=400 max_depth=400#pragma ACCEL interface variable=u1 depth=400 max_depth=400#pragma ACCEL interface variable=A depth=400,400 max_depth=400,400__merlin_access_range(z,0,399UL);__merlin_access_range(y,0,399UL);__merlin_access_range(x,0,399UL);__merlin_access_range(w,0,399UL);__merlin_access_range(v2,0,399UL);__merlin_access_range(u2,0,399UL);__merlin_access_range(v1,0,399UL);__merlin_access_range(u1,0,399UL);__merlin_access_range(A,0,159999);int i;int j;{float z_4_0_buf[400];float v2_6_0_buf[400];float u2_6_0_buf[400];float v1_6_0_buf[400];float u1_6_0_buf[400];float y_7_0_buf[400];float w_buf[400];float A_buf[160000];float x_buf[400];memcpy((void *)(&x_buf[0]),(const void *)(&x[0]),sizeof(float ) * 400);memcpy((void *)(&A_buf[0]),(const void *)(&A[0]),sizeof(float ) * 160000L);{memcpy((void *)(&u1_6_0_buf[0]),(const void *)(&u1[0]),sizeof(float ) * 400);}{memcpy((void *)(&v1_6_0_buf[0]),(const void *)(&v1[0]),sizeof(float ) * 400);}{memcpy((void *)(&u2_6_0_buf[0]),(const void *)(&u2[0]),sizeof(float ) * 400);}{memcpy((void *)(&v2_6_0_buf[0]),(const void *)(&v2[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEA_buf[i * 400L + j] = A_buf[i * 400L + j] + u1_6_0_buf[i] * v1_6_0_buf[j] + u2_6_0_buf[i] * v2_6_0_buf[j];}}{memcpy((void *)(&y_7_0_buf[0]),(const void *)(&y[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + beta * A_buf[j * 400L + i] * y_7_0_buf[j];}}{memcpy((void *)(&z_4_0_buf[0]),(const void *)(&z[0]),sizeof(float ) * 400);}for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE AUTOx_buf[i] = x_buf[i] + z_4_0_buf[i];}memcpy((void *)(&w_buf[0]),(const void *)(&w[0]),sizeof(float ) * 400);for(i = 0;i < 400;i++) {#pragma ACCEL PIPELINE#pragma ACCEL TILE FACTOR=1for(j = 0;j < 400;j++) {#pragma ACCEL PARALLEL COMPLETEw_buf[i] = w_buf[i] + alpha * A_buf[i * 400L + j] * x_buf[j];}}memcpy((void *)(&w[0]),(const void *)(&w_buf[0]),sizeof(float ) * 400);memcpy((void *)(&x[0]),(const void *)(&x_buf[0]),sizeof(float ) * 400);memcpy((void *)(&A[0]),(const void *)(&A_buf[0]),sizeof(float ) * 160000L);}}
parent pipeline found
parent pipeline found
parent pipeline found
[MARS-BURST-MSG] Current analysis will skip function body or any function call in the loop.
============================================
-----=# Memory Burst Optimization End#=----
============================================

mars_opt __dummy__.c __merlinwrapper_kernel_gemver.c __merlinkernel_kernel_gemver.c  -e c -p memory_burst -a cstd=c99 -a cxxstd=c++11  -a impl_tool=sdaccel -a tool_version=vitis -a effort=standard -a generate_l2_api=on -a bus_length_threshold= -a debug_mode=debug   -I /opt/merlin/sources/merlin-compiler/trunk/source-opt/include/apint_include -I/home/spouget/iccad_24/autodse_without_tree_reduction/gemver_MEDIUM/_done/work_dir/output/fast/0 -I/home/spouget/iccad_24/autodse_without_tree_reduction/gemver_MEDIUM/_done/work_dir/output/fast/0/gemver_MEDIUM/ -I/opt/merlin/sources/merlin-compiler/trunk//mars-gen/lib/merlin -I /opt/merlin/sources/merlin-compiler/trunk/mars-gen/lib/merlin -a cflags=" -D__SYNTHESIS__  -D_MARS_COMPILER_FLOW_ "
