-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gemm_kernel_gemm_Pipeline_L3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WLAST : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RVALID : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RREADY : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RLAST : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BVALID : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_BREADY : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln1705 : IN STD_LOGIC_VECTOR (57 downto 0);
    C_buf_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_ce0 : OUT STD_LOGIC;
    C_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_16_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_16_ce0 : OUT STD_LOGIC;
    C_buf_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_17_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_17_ce0 : OUT STD_LOGIC;
    C_buf_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_18_ce0 : OUT STD_LOGIC;
    C_buf_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_19_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_19_ce0 : OUT STD_LOGIC;
    C_buf_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_20_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_20_ce0 : OUT STD_LOGIC;
    C_buf_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_21_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_21_ce0 : OUT STD_LOGIC;
    C_buf_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_22_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_22_ce0 : OUT STD_LOGIC;
    C_buf_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_23_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_23_ce0 : OUT STD_LOGIC;
    C_buf_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_24_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_24_ce0 : OUT STD_LOGIC;
    C_buf_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_25_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_25_ce0 : OUT STD_LOGIC;
    C_buf_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_26_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_26_ce0 : OUT STD_LOGIC;
    C_buf_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_27_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_27_ce0 : OUT STD_LOGIC;
    C_buf_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_28_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_28_ce0 : OUT STD_LOGIC;
    C_buf_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_29_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_29_ce0 : OUT STD_LOGIC;
    C_buf_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_buf_30_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_buf_30_ce0 : OUT STD_LOGIC;
    C_buf_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_gemm_kernel_gemm_Pipeline_L3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1845_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal merlin_gmem_kernel_gemm_512_C_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal buf_tmp_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_8_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_1_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_9_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_2_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_10_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_3_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_11_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_4_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_12_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_5_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_13_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_6_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_14_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_7_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_tmp_15_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1870_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_fu_98 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal i_2_fu_393_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal index3_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal index3_3_fu_450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal index2_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal index2_2_fu_458_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1870_fu_357_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1870_1_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_361_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_373_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1870_fu_381_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1845_fu_402_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1870_fu_406_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1875_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index3_2_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal index2_1_fu_444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal raw_bits_15_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_14_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_13_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_12_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_11_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_10_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_9_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_8_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_7_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_6_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_5_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_4_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_3_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_2_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_1_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_gemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_gemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv13_0;
                elsif (((icmp_ln1845_fu_387_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_98 <= i_2_fu_393_p2;
                end if;
            end if; 
        end if;
    end process;

    index2_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index2_fu_106 <= ap_const_lv64_0;
                elsif (((icmp_ln1845_fu_387_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    index2_fu_106 <= index2_2_fu_458_p3;
                end if;
            end if; 
        end if;
    end process;

    index3_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index3_fu_102 <= ap_const_lv64_0;
                elsif (((icmp_ln1845_fu_387_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    index3_fu_102 <= index3_3_fu_450_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                buf_tmp_10_reg_707 <= C_buf_25_q0;
                buf_tmp_11_reg_717 <= C_buf_26_q0;
                buf_tmp_12_reg_727 <= C_buf_27_q0;
                buf_tmp_13_reg_737 <= C_buf_28_q0;
                buf_tmp_14_reg_747 <= C_buf_29_q0;
                buf_tmp_15_reg_757 <= C_buf_30_q0;
                buf_tmp_1_reg_692 <= C_buf_16_q0;
                buf_tmp_2_reg_702 <= C_buf_17_q0;
                buf_tmp_3_reg_712 <= C_buf_18_q0;
                buf_tmp_4_reg_722 <= C_buf_19_q0;
                buf_tmp_5_reg_732 <= C_buf_20_q0;
                buf_tmp_6_reg_742 <= C_buf_21_q0;
                buf_tmp_7_reg_752 <= C_buf_22_q0;
                buf_tmp_8_reg_687 <= C_buf_23_q0;
                buf_tmp_9_reg_697 <= C_buf_24_q0;
                buf_tmp_reg_682 <= C_buf_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    C_buf_16_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_16_ce0 <= ap_const_logic_1;
        else 
            C_buf_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_17_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_17_ce0 <= ap_const_logic_1;
        else 
            C_buf_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_18_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_18_ce0 <= ap_const_logic_1;
        else 
            C_buf_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_19_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_19_ce0 <= ap_const_logic_1;
        else 
            C_buf_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_20_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_20_ce0 <= ap_const_logic_1;
        else 
            C_buf_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_21_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_21_ce0 <= ap_const_logic_1;
        else 
            C_buf_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_22_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_22_ce0 <= ap_const_logic_1;
        else 
            C_buf_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_23_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_23_ce0 <= ap_const_logic_1;
        else 
            C_buf_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_24_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_24_ce0 <= ap_const_logic_1;
        else 
            C_buf_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_25_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_25_ce0 <= ap_const_logic_1;
        else 
            C_buf_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_26_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_26_ce0 <= ap_const_logic_1;
        else 
            C_buf_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_27_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_27_ce0 <= ap_const_logic_1;
        else 
            C_buf_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_28_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_28_ce0 <= ap_const_logic_1;
        else 
            C_buf_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_29_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_29_ce0 <= ap_const_logic_1;
        else 
            C_buf_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_30_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_30_ce0 <= ap_const_logic_1;
        else 
            C_buf_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_address0 <= zext_ln1870_fu_412_p1(13 - 1 downto 0);

    C_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            C_buf_ce0 <= ap_const_logic_1;
        else 
            C_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1870_fu_406_p2 <= std_logic_vector(unsigned(sub_ln1870_fu_381_p2) + unsigned(trunc_ln1845_fu_402_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_merlin_gmem_kernel_gemm_512_C_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_merlin_gmem_kernel_gemm_512_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_merlin_gmem_kernel_gemm_512_C_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_merlin_gmem_kernel_gemm_512_C_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1845_fu_387_p2)
    begin
        if (((icmp_ln1845_fu_387_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_393_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv13_1));
    icmp_ln1845_fu_387_p2 <= "1" when (i_fu_98 = ap_const_lv13_12C0) else "0";
    icmp_ln1875_fu_432_p2 <= "1" when (index2_fu_106 = ap_const_lv64_2F) else "0";
    index2_1_fu_444_p2 <= std_logic_vector(unsigned(index2_fu_106) + unsigned(ap_const_lv64_1));
    index2_2_fu_458_p3 <= 
        ap_const_lv64_0 when (icmp_ln1875_fu_432_p2(0) = '1') else 
        index2_1_fu_444_p2;
    index3_2_fu_438_p2 <= std_logic_vector(unsigned(index3_fu_102) + unsigned(ap_const_lv64_1));
    index3_3_fu_450_p3 <= 
        index3_2_fu_438_p2 when (icmp_ln1875_fu_432_p2(0) = '1') else 
        index3_fu_102;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARADDR <= ap_const_lv64_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARBURST <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARCACHE <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLEN <= ap_const_lv32_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLOCK <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARPROT <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARQOS <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREGION <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARSIZE <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARUSER <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARVALID <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWADDR <= ap_const_lv64_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWBURST <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWCACHE <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLEN <= ap_const_lv32_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLOCK <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWPROT <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWQOS <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREGION <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWSIZE <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWUSER <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWVALID <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_BREADY <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_RREADY <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WDATA <= (((((((((((((((raw_bits_15_fu_532_p1 & raw_bits_14_fu_529_p1) & raw_bits_13_fu_526_p1) & raw_bits_12_fu_523_p1) & raw_bits_11_fu_520_p1) & raw_bits_10_fu_517_p1) & raw_bits_9_fu_514_p1) & raw_bits_8_fu_511_p1) & raw_bits_7_fu_508_p1) & raw_bits_6_fu_505_p1) & raw_bits_5_fu_502_p1) & raw_bits_4_fu_499_p1) & raw_bits_3_fu_496_p1) & raw_bits_2_fu_493_p1) & raw_bits_1_fu_490_p1) & raw_bits_fu_487_p1);
    m_axi_merlin_gmem_kernel_gemm_512_C_WID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WLAST <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_merlin_gmem_kernel_gemm_512_C_WUSER <= ap_const_lv1_0;

    m_axi_merlin_gmem_kernel_gemm_512_C_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_merlin_gmem_kernel_gemm_512_C_WVALID <= ap_const_logic_1;
        else 
            m_axi_merlin_gmem_kernel_gemm_512_C_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    merlin_gmem_kernel_gemm_512_C_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_merlin_gmem_kernel_gemm_512_C_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            merlin_gmem_kernel_gemm_512_C_blk_n_W <= m_axi_merlin_gmem_kernel_gemm_512_C_WREADY;
        else 
            merlin_gmem_kernel_gemm_512_C_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    raw_bits_10_fu_517_p1 <= buf_tmp_10_reg_707;
    raw_bits_11_fu_520_p1 <= buf_tmp_11_reg_717;
    raw_bits_12_fu_523_p1 <= buf_tmp_12_reg_727;
    raw_bits_13_fu_526_p1 <= buf_tmp_13_reg_737;
    raw_bits_14_fu_529_p1 <= buf_tmp_14_reg_747;
    raw_bits_15_fu_532_p1 <= buf_tmp_15_reg_757;
    raw_bits_1_fu_490_p1 <= buf_tmp_1_reg_692;
    raw_bits_2_fu_493_p1 <= buf_tmp_2_reg_702;
    raw_bits_3_fu_496_p1 <= buf_tmp_3_reg_712;
    raw_bits_4_fu_499_p1 <= buf_tmp_4_reg_722;
    raw_bits_5_fu_502_p1 <= buf_tmp_5_reg_732;
    raw_bits_6_fu_505_p1 <= buf_tmp_6_reg_742;
    raw_bits_7_fu_508_p1 <= buf_tmp_7_reg_752;
    raw_bits_8_fu_511_p1 <= buf_tmp_8_reg_687;
    raw_bits_9_fu_514_p1 <= buf_tmp_9_reg_697;
    raw_bits_fu_487_p1 <= buf_tmp_reg_682;
    sub_ln1870_fu_381_p2 <= std_logic_vector(unsigned(tmp_fu_361_p3) - unsigned(tmp_1_fu_373_p3));
    tmp_1_fu_373_p3 <= (trunc_ln1870_1_fu_369_p1 & ap_const_lv4_0);
    tmp_fu_361_p3 <= (trunc_ln1870_fu_357_p1 & ap_const_lv6_0);
    trunc_ln1845_fu_402_p1 <= index2_fu_106(13 - 1 downto 0);
    trunc_ln1870_1_fu_369_p1 <= index3_fu_102(9 - 1 downto 0);
    trunc_ln1870_fu_357_p1 <= index3_fu_102(7 - 1 downto 0);
    zext_ln1870_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1870_fu_406_p2),64));
end behav;
