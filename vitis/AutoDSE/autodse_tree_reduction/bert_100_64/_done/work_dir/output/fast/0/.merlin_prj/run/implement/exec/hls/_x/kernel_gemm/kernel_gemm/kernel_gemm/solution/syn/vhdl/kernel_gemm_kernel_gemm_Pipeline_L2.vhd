-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gemm_kernel_gemm_Pipeline_L2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WLAST : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARVALID : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREADY : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RVALID : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RREADY : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RLAST : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BVALID : IN STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_BREADY : OUT STD_LOGIC;
    m_axi_merlin_gmem_kernel_gemm_512_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_merlin_gmem_kernel_gemm_512_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln1705 : IN STD_LOGIC_VECTOR (57 downto 0);
    C_buf_30_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_30_ce0 : OUT STD_LOGIC;
    C_buf_30_we0 : OUT STD_LOGIC;
    C_buf_30_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_29_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_29_ce0 : OUT STD_LOGIC;
    C_buf_29_we0 : OUT STD_LOGIC;
    C_buf_29_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_28_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_28_ce0 : OUT STD_LOGIC;
    C_buf_28_we0 : OUT STD_LOGIC;
    C_buf_28_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_27_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_27_ce0 : OUT STD_LOGIC;
    C_buf_27_we0 : OUT STD_LOGIC;
    C_buf_27_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_26_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_26_ce0 : OUT STD_LOGIC;
    C_buf_26_we0 : OUT STD_LOGIC;
    C_buf_26_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_25_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_25_ce0 : OUT STD_LOGIC;
    C_buf_25_we0 : OUT STD_LOGIC;
    C_buf_25_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_24_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_24_ce0 : OUT STD_LOGIC;
    C_buf_24_we0 : OUT STD_LOGIC;
    C_buf_24_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_23_ce0 : OUT STD_LOGIC;
    C_buf_23_we0 : OUT STD_LOGIC;
    C_buf_23_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_22_ce0 : OUT STD_LOGIC;
    C_buf_22_we0 : OUT STD_LOGIC;
    C_buf_22_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_21_ce0 : OUT STD_LOGIC;
    C_buf_21_we0 : OUT STD_LOGIC;
    C_buf_21_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_20_ce0 : OUT STD_LOGIC;
    C_buf_20_we0 : OUT STD_LOGIC;
    C_buf_20_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_19_ce0 : OUT STD_LOGIC;
    C_buf_19_we0 : OUT STD_LOGIC;
    C_buf_19_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_18_ce0 : OUT STD_LOGIC;
    C_buf_18_we0 : OUT STD_LOGIC;
    C_buf_18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_17_ce0 : OUT STD_LOGIC;
    C_buf_17_we0 : OUT STD_LOGIC;
    C_buf_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_16_ce0 : OUT STD_LOGIC;
    C_buf_16_we0 : OUT STD_LOGIC;
    C_buf_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    C_buf_ce0 : OUT STD_LOGIC;
    C_buf_we0 : OUT STD_LOGIC;
    C_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_gemm_kernel_gemm_Pipeline_L2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1705_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal merlin_gmem_kernel_gemm_512_C_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal raw_bits_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_1_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_2_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_3_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_4_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_5_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_6_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_7_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_8_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_9_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_34_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_35_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_36_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_37_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_38_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_bits_39_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1733_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_148 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal i_7_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_6 : STD_LOGIC_VECTOR (8 downto 0);
    signal index3_fu_152 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal index3_7_fu_702_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal index2_fu_156 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal index2_8_fu_710_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1733_fu_584_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1705_fu_590_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1733_fu_594_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1737_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index3_6_fu_690_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal index2_7_fu_696_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_gemm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_gemm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1705_fu_401_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_148 <= i_7_fu_407_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_148 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    index2_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    index2_fu_156 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index2_fu_156 <= index2_8_fu_710_p3;
                end if;
            end if; 
        end if;
    end process;

    index3_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    index3_fu_152 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index3_fu_152 <= index3_7_fu_702_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                raw_bits_1_reg_763 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(63 downto 32);
                raw_bits_2_reg_768 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(95 downto 64);
                raw_bits_34_reg_808 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(351 downto 320);
                raw_bits_35_reg_813 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(383 downto 352);
                raw_bits_36_reg_818 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(415 downto 384);
                raw_bits_37_reg_823 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(447 downto 416);
                raw_bits_38_reg_828 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(479 downto 448);
                raw_bits_39_reg_833 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(511 downto 480);
                raw_bits_3_reg_773 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(127 downto 96);
                raw_bits_4_reg_778 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(159 downto 128);
                raw_bits_5_reg_783 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(191 downto 160);
                raw_bits_6_reg_788 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(223 downto 192);
                raw_bits_7_reg_793 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(255 downto 224);
                raw_bits_8_reg_798 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(287 downto 256);
                raw_bits_9_reg_803 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(319 downto 288);
                raw_bits_reg_758 <= raw_bits_fu_424_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    C_buf_16_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_16_ce0 <= ap_const_logic_1;
        else 
            C_buf_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_16_d0 <= raw_bits_1_reg_763;

    C_buf_16_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_16_we0 <= ap_const_logic_1;
        else 
            C_buf_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_17_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_17_ce0 <= ap_const_logic_1;
        else 
            C_buf_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_17_d0 <= raw_bits_2_reg_768;

    C_buf_17_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_17_we0 <= ap_const_logic_1;
        else 
            C_buf_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_18_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_18_ce0 <= ap_const_logic_1;
        else 
            C_buf_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_18_d0 <= raw_bits_3_reg_773;

    C_buf_18_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_18_we0 <= ap_const_logic_1;
        else 
            C_buf_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_19_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_19_ce0 <= ap_const_logic_1;
        else 
            C_buf_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_19_d0 <= raw_bits_4_reg_778;

    C_buf_19_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_19_we0 <= ap_const_logic_1;
        else 
            C_buf_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_20_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_20_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_20_ce0 <= ap_const_logic_1;
        else 
            C_buf_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_20_d0 <= raw_bits_5_reg_783;

    C_buf_20_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_20_we0 <= ap_const_logic_1;
        else 
            C_buf_20_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_21_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_21_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_21_ce0 <= ap_const_logic_1;
        else 
            C_buf_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_21_d0 <= raw_bits_6_reg_788;

    C_buf_21_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_21_we0 <= ap_const_logic_1;
        else 
            C_buf_21_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_22_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_22_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_22_ce0 <= ap_const_logic_1;
        else 
            C_buf_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_22_d0 <= raw_bits_7_reg_793;

    C_buf_22_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_22_we0 <= ap_const_logic_1;
        else 
            C_buf_22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_23_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_23_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_23_ce0 <= ap_const_logic_1;
        else 
            C_buf_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_23_d0 <= raw_bits_8_reg_798;

    C_buf_23_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_23_we0 <= ap_const_logic_1;
        else 
            C_buf_23_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_24_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_24_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_24_ce0 <= ap_const_logic_1;
        else 
            C_buf_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_24_d0 <= raw_bits_9_reg_803;

    C_buf_24_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_24_we0 <= ap_const_logic_1;
        else 
            C_buf_24_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_25_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_25_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_25_ce0 <= ap_const_logic_1;
        else 
            C_buf_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_25_d0 <= raw_bits_34_reg_808;

    C_buf_25_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_25_we0 <= ap_const_logic_1;
        else 
            C_buf_25_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_26_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_26_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_26_ce0 <= ap_const_logic_1;
        else 
            C_buf_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_26_d0 <= raw_bits_35_reg_813;

    C_buf_26_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_26_we0 <= ap_const_logic_1;
        else 
            C_buf_26_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_27_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_27_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_27_ce0 <= ap_const_logic_1;
        else 
            C_buf_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_27_d0 <= raw_bits_36_reg_818;

    C_buf_27_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_27_we0 <= ap_const_logic_1;
        else 
            C_buf_27_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_28_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_28_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_28_ce0 <= ap_const_logic_1;
        else 
            C_buf_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_28_d0 <= raw_bits_37_reg_823;

    C_buf_28_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_28_we0 <= ap_const_logic_1;
        else 
            C_buf_28_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_29_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_29_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_29_ce0 <= ap_const_logic_1;
        else 
            C_buf_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_29_d0 <= raw_bits_38_reg_828;

    C_buf_29_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_29_we0 <= ap_const_logic_1;
        else 
            C_buf_29_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_30_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_30_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_30_ce0 <= ap_const_logic_1;
        else 
            C_buf_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_30_d0 <= raw_bits_39_reg_833;

    C_buf_30_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_30_we0 <= ap_const_logic_1;
        else 
            C_buf_30_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_address0 <= zext_ln1733_fu_600_p1(9 - 1 downto 0);

    C_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_ce0 <= ap_const_logic_1;
        else 
            C_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_buf_d0 <= raw_bits_reg_758;

    C_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            C_buf_we0 <= ap_const_logic_1;
        else 
            C_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1733_fu_594_p2 <= std_logic_vector(unsigned(shl_ln1733_fu_584_p2) + unsigned(trunc_ln1705_fu_590_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_merlin_gmem_kernel_gemm_512_C_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_merlin_gmem_kernel_gemm_512_C_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1705_fu_401_p2)
    begin
        if (((icmp_ln1705_fu_401_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_148, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_6 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_6 <= i_fu_148;
        end if; 
    end process;

    i_7_fu_407_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_6) + unsigned(ap_const_lv9_1));
    icmp_ln1705_fu_401_p2 <= "1" when (ap_sig_allocacmp_i_6 = ap_const_lv9_190) else "0";
    icmp_ln1737_fu_684_p2 <= "1" when (index2_fu_156 = ap_const_lv64_3) else "0";
    index2_7_fu_696_p2 <= std_logic_vector(unsigned(index2_fu_156) + unsigned(ap_const_lv64_1));
    index2_8_fu_710_p3 <= 
        ap_const_lv64_0 when (icmp_ln1737_fu_684_p2(0) = '1') else 
        index2_7_fu_696_p2;
    index3_6_fu_690_p2 <= std_logic_vector(unsigned(index3_fu_152) + unsigned(ap_const_lv9_1));
    index3_7_fu_702_p3 <= 
        index3_6_fu_690_p2 when (icmp_ln1737_fu_684_p2(0) = '1') else 
        index3_fu_152;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARADDR <= ap_const_lv64_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARBURST <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARCACHE <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLEN <= ap_const_lv32_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARLOCK <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARPROT <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARQOS <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARREGION <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARSIZE <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARUSER <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_ARVALID <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWADDR <= ap_const_lv64_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWBURST <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWCACHE <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLEN <= ap_const_lv32_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWLOCK <= ap_const_lv2_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWPROT <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWQOS <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWREGION <= ap_const_lv4_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWSIZE <= ap_const_lv3_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWUSER <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_AWVALID <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_BREADY <= ap_const_logic_0;

    m_axi_merlin_gmem_kernel_gemm_512_C_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_merlin_gmem_kernel_gemm_512_C_RREADY <= ap_const_logic_1;
        else 
            m_axi_merlin_gmem_kernel_gemm_512_C_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_merlin_gmem_kernel_gemm_512_C_WDATA <= ap_const_lv512_lc_1;
    m_axi_merlin_gmem_kernel_gemm_512_C_WID <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WLAST <= ap_const_logic_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WSTRB <= ap_const_lv64_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WUSER <= ap_const_lv1_0;
    m_axi_merlin_gmem_kernel_gemm_512_C_WVALID <= ap_const_logic_0;

    merlin_gmem_kernel_gemm_512_C_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_merlin_gmem_kernel_gemm_512_C_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            merlin_gmem_kernel_gemm_512_C_blk_n_R <= m_axi_merlin_gmem_kernel_gemm_512_C_RVALID;
        else 
            merlin_gmem_kernel_gemm_512_C_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    raw_bits_fu_424_p1 <= m_axi_merlin_gmem_kernel_gemm_512_C_RDATA(32 - 1 downto 0);
    shl_ln1733_fu_584_p2 <= std_logic_vector(shift_left(unsigned(index3_fu_152),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    trunc_ln1705_fu_590_p1 <= index2_fu_156(9 - 1 downto 0);
    zext_ln1733_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1733_fu_594_p2),64));
end behav;
