option solver gurobi;
option gurobi_options 'lim:time=14400 tech:logfile=gurobi.log qp:nonconvex=2';

#Size array y: [410]
#Size array A: [390, 410]
#Size array x: [410]
#Size array tmp: [390]
#loop_0 iterates Array y in dim 0
#loop_1 iterates Array tmp in dim 0
#loop_2 iterates Array tmp in dim 0
#loop_2 iterates Array A in dim 0
#loop_3 iterates Array A in dim 1
#loop_3 iterates Array x in dim 0
#loop_2 iterates Array tmp in dim 0
#loop_4 iterates Array y in dim 0
#loop_4 iterates Array A in dim 1
#loop_5 iterates Array A in dim 0
#loop_5 iterates Array tmp in dim 0
#loop_4 iterates Array y in dim 0
#schedule 0 0 0
#iterators j
#loop_0 := False
#schedule 1 1 0
#iterators i
#loop_1 := False
#schedule 2 2 0 3 0
#iterators i j
#loop_2 := False
#loop_3 := True
#schedule 3 4 0 5 0
#iterators j i
#loop_4 := False
#loop_5 := True
param DSP_avail = 1804;
param ON_CHIP_MEM_SIZE = 453600;
param CONSTRAINT_ARRAY_PARTITIONING_VALUE = 1024;
param BRAM = 4320;
param size_data_type = 32;
param optimist_reuse_dsp=1;
param TC0 = 410;
param TC1 = 390;
param TC2 = 390;
param TC3 = 410;
param TC4 = 410;
param TC5 = 390;
param TREE_REDUCTION=1;
param IL_par_S0 = 1;
param IL_seq_S0 = 0;
param IL_par_S1 = 1;
param IL_seq_S1 = 0;
param IL_par_S2 = 6;
param IL_seq_S2 = 7;
param IL_par_S3 = 6;
param IL_seq_S3 = 7;
param DSP_S0 = 0;
param DSP_S1 = 0;
param DSP_S2 = 5;
param DSP_S3 = 5;
param footprint_y_S0 = 410;
param footprint_tmp_S1 = 390;
param footprint_tmp_S2 = 390;
param footprint_A_S2 = 159900;
param footprint_x_S2 = 410;
param footprint_y_S3 = 410;
param footprint_A_S3 = 159900;
param footprint_tmp_S3 = 390;
param footprint_tot_y = 410;
param burst_size_tot_y = 2;
param footprint_tot_A = 159900;
param burst_size_tot_A = 2;
param footprint_tot_x = 410;
param burst_size_tot_x = 2;
param footprint_tot_tmp = 390;
param burst_size_tot_tmp = 2;

var TC0_0 integer >= 1 <=TC0;
var TC0_1 integer >= 1 <=TC0;
var TC0_2 integer >= 1 <=TC0;
var TC1_0 integer >= 1 <=TC1;
var TC1_1 integer >= 1 <=TC1;
var TC1_2 integer >= 1 <=TC1;
var TC2_0 integer >= 1 <=TC2;
var TC2_1 integer >= 1 <=TC2;
var TC2_2 integer >= 1 <=TC2;
var TC3_0 integer >= 1 <=TC3;
var TC3_1 integer >= 1 <=TC3;
var TC3_2 integer >= 1 <=TC3;
var TC4_0 integer >= 1 <=TC4;
var TC4_1 integer >= 1 <=TC4;
var TC4_2 integer >= 1 <=TC4;
var TC5_0 integer >= 1 <=TC5;
var TC5_1 integer >= 1 <=TC5;
var TC5_2 integer >= 1 <=TC5;
var loop0_UF integer >= 1 <=TC0;
var loop1_UF integer >= 1 <=TC1;
var loop2_UF integer >= 1 <=TC2;
var loop4_UF integer >= 1 <=TC4;
var Lat_comp_S0 >= 0;
var Lat_comp_S0_no_tree >= 0;
var Lat_comp_S1 >= 0;
var Lat_comp_S1_no_tree >= 0;
var Lat_comp_S2 >= 0;
var Lat_comp_S2_no_tree >= 0;
var Lat_comp_S3 >= 0;
var Lat_comp_S3_no_tree >= 0;
var II_S0 integer >= 1;
var II_S1 integer >= 1;
var II_S2 integer >= 1;
var II_S3 integer >= 1;
var is_loop0_pip binary;
var is_loop1_pip binary;
var is_loop2_pip binary;
var is_loop3_pip binary;
var is_loop4_pip binary;
var is_loop5_pip binary;
var AP_y_0 integer >= 1;
var constant0 integer >= 1;
var cte_0 integer >= 1;
var cte_1 integer >= 1;
var cte_2 integer >= 1;
var AP_A_0 integer >= 1;
var cte_3 integer >= 1;
var cte_4 integer >= 1;
var cte_5 integer >= 1;
var AP_A_1 integer >= 1;
var constant1 integer >= 1;
var cte_6 integer >= 1;
var cte_7 integer >= 1;
var cte_8 integer >= 1;
var AP_x_0 integer >= 1;
var constant2 integer >= 1;
var cte_9 integer >= 1;
var cte_10 integer >= 1;
var AP_tmp_0 integer >= 1;
var constant3 integer >= 1;
var cte_11 integer >= 1;
var cte_12 integer >= 1;
var cte_13 integer >= 1;
var cte_14 integer >= 1;
var Lat_comm >= 0;
var transfer_y_total binary;
var transfer_A_total binary;
var transfer_x_total binary;
var transfer_tmp_total binary;
var transfer_y_S0_under_loop0 binary;
var burst_y_S0_under_loop0 integer >= 1 <=burst_size_tot_y;
var transfer_y_S3_under_loop4 binary;
var burst_y_S3_under_loop4 integer >= 1 <=burst_size_tot_y;
var transfer_A_S2_under_loop2 binary;
var burst_A_S2_under_loop2 integer >= 1 <=burst_size_tot_A;
var transfer_A_S2_under_loop3 binary;
var burst_A_S2_under_loop3 integer >= 1 <=burst_size_tot_A;
var transfer_A_S3_under_loop5 binary;
var burst_A_S3_under_loop5 integer >= 1 <=burst_size_tot_A;
var transfer_A_S3_under_loop4 binary;
var burst_A_S3_under_loop4 integer >= 1 <=burst_size_tot_A;
var transfer_x_S2_under_loop3 binary;
var burst_x_S2_under_loop3 integer >= 1 <=burst_size_tot_x;
var transfer_tmp_S1_under_loop1 binary;
var burst_tmp_S1_under_loop1 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S2_under_loop2 binary;
var burst_tmp_S2_under_loop2 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S3_under_loop5 binary;
var burst_tmp_S3_under_loop5 integer >= 1 <=burst_size_tot_tmp;
var burst_size_y integer >= 1 <=2;
var cte_burst_size_y integer >= 1;
var is_burst_size_y_16 binary;
var is_burst_size_y_8 binary;
var is_burst_size_y_4 binary;
var is_burst_size_y_2 binary;
var is_burst_size_y_1 binary;
var burst_size_A integer >= 1 <=2;
var cte_burst_size_A integer >= 1;
var is_burst_size_A_16 binary;
var is_burst_size_A_8 binary;
var is_burst_size_A_4 binary;
var is_burst_size_A_2 binary;
var is_burst_size_A_1 binary;
var burst_size_x integer >= 1 <=2;
var cte_burst_size_x integer >= 1;
var is_burst_size_x_16 binary;
var is_burst_size_x_8 binary;
var is_burst_size_x_4 binary;
var is_burst_size_x_2 binary;
var is_burst_size_x_1 binary;
var burst_size_tmp integer >= 1 <=2;
var cte_burst_size_tmp integer >= 1;
var is_burst_size_tmp_16 binary;
var is_burst_size_tmp_8 binary;
var is_burst_size_tmp_4 binary;
var is_burst_size_tmp_2 binary;
var is_burst_size_tmp_1 binary;
var Lat_comm_read_S0;
var Lat_comm_write_S0;
var Lat_comm_read_S1;
var Lat_comm_write_S1;
var Lat_comm_read_S2;
var Lat_comm_write_S2;
var Lat_comm_read_S3;
var Lat_comm_write_S3;
var ceil0 integer >= 0;
var ceil1 integer >= 0;
var ceil2 integer >= 0;
var ceil3 integer >= 0;
var ceil4 integer >= 0;
var ceil5 integer >= 0;
var ceil6 integer >= 0;
var ceil7 integer >= 0;
var ceil8 integer >= 0;
var ceil9 integer >= 0;

minimize cost: Lat_comp_S0 + Lat_comp_S1 + Lat_comp_S2 + Lat_comp_S3 + Lat_comm;

subject to con550: TC2_2 * TC3_2  <= 256;
subject to con551: TC4_2 * TC5_2  <= 256;


subject to con0: TC0 = TC0_0 * TC0_1 * TC0_2;
subject to con1: TC1 = TC1_0 * TC1_1 * TC1_2;
subject to con2: TC2 = TC2_0 * TC2_1 * TC2_2;
subject to con3: TC3 = TC3_0 * TC3_1 * TC3_2;
subject to con4: TC4 = TC4_0 * TC4_1 * TC4_2;
subject to con5: TC5 = TC5_0 * TC5_1 * TC5_2;
subject to con6: loop0_UF = 1;
subject to con7: loop1_UF = 1;
subject to con8: loop2_UF = 1;
subject to con9: loop4_UF = 1;
subject to con10: DSP_S2 * TC2_2 * TC3_2 * loop2_UF <= DSP_avail * II_S2;
subject to con11: DSP_S3 * TC4_2 * TC5_2 * loop4_UF <= DSP_avail * II_S3;
subject to con12: (1-optimist_reuse_dsp) * (DSP_S2 * TC2_2 * TC3_2 * loop2_UF) / II_S2 + (DSP_S3 * TC4_2 * TC5_2 * loop4_UF) / II_S3 <= DSP_avail;
subject to con13: loop0_UF <= TC0_0;
subject to con14: Lat_comp_S0 = TREE_REDUCTION * (TC0_0 / loop0_UF * (IL_par_S0 + II_S0 * (TC0_1 - 1))) + (1-TREE_REDUCTION) * (TC0_0 / loop0_UF * (IL_par_S0 + II_S0 * (TC0_1 - 1))) ;
subject to con15: loop1_UF <= TC1_0;
subject to con16: Lat_comp_S1 = TREE_REDUCTION * (TC1_0 / loop1_UF * (IL_par_S1 + II_S1 * (TC1_1 - 1))) + (1-TREE_REDUCTION) * (TC1_0 / loop1_UF * (IL_par_S1 + II_S1 * (TC1_1 - 1))) ;
subject to con17: loop2_UF <= TC2_0;
subject to con18: Lat_comp_S2 = TREE_REDUCTION * (TC2_0 / loop2_UF * TC3_0 * (IL_par_S2 + IL_seq_S2 * log(TC3_2)/log(2) + II_S2 * (TC2_1 * TC3_1 - 1))) + (1-TREE_REDUCTION) * (TC2_0 / loop2_UF * TC3_0 * (IL_par_S2 + IL_seq_S2 * TC3_2 + II_S2 * (TC2_1 * TC3_1 - 1))) ;
subject to con19: loop4_UF <= TC4_0;
subject to con20: Lat_comp_S3 = TREE_REDUCTION * (TC4_0 / loop4_UF * TC5_0 * (IL_par_S3 + IL_seq_S3 * log(TC5_2)/log(2) + II_S3 * (TC4_1 * TC5_1 - 1))) + (1-TREE_REDUCTION) * (TC4_0 / loop4_UF * TC5_0 * (IL_par_S3 + IL_seq_S3 * TC5_2 + II_S3 * (TC4_1 * TC5_1 - 1))) ;
subject to con21: II_S0 = 1;
subject to con22: is_loop0_pip * TC0_1 >= is_loop0_pip * 2;
subject to con23: is_loop0_pip = 1;
subject to con24: II_S1 = 1;
subject to con25: is_loop1_pip * TC1_1 >= is_loop1_pip * 2;
subject to con26: is_loop1_pip = 1;
subject to con27: is_loop2_pip * TC3_1 = is_loop2_pip * 1;
subject to con28: is_loop2_pip * TC2_1 >= is_loop2_pip * 2;
subject to con29: is_loop3_pip * TC2_1 = is_loop3_pip * 1;
subject to con30: is_loop3_pip * TC3_1 >= is_loop3_pip * 2;
subject to con31: is_loop2_pip + is_loop3_pip = 1;
subject to con32: II_S2 = 1 * is_loop2_pip + 6 * is_loop3_pip * TREE_REDUCTION + 7 * TC3_2 * is_loop3_pip * (1 - TREE_REDUCTION);
subject to con33: is_loop4_pip * TC5_1 = is_loop4_pip * 1;
subject to con34: is_loop4_pip * TC4_1 >= is_loop4_pip * 2;
subject to con35: is_loop5_pip * TC4_1 = is_loop5_pip * 1;
subject to con36: is_loop5_pip * TC5_1 >= is_loop5_pip * 2;
subject to con37: is_loop4_pip + is_loop5_pip = 1;
subject to con38: II_S3 = 1 * is_loop4_pip + 6 * is_loop5_pip * TREE_REDUCTION + 7 * TC5_2 * is_loop5_pip * (1 - TREE_REDUCTION);
subject to con39: AP_y_0 = burst_size_y * constant0;
#subject to con40: loop0_UF * TC0_2 + loop4_UF * TC4_2 <= AP_y_0;
subject to con41: AP_y_0 = loop0_UF * TC0_2  * cte_0;
subject to con42: loop0_UF * TC0_2  <= AP_y_0;
subject to con43: AP_y_0 =  loop4_UF * TC4_2 * cte_1;
subject to con44:  loop4_UF * TC4_2 <= AP_y_0;
subject to con45: AP_y_0 <= 410;
#subject to con46: 410 = AP_y_0 * cte_2;
subject to con47: AP_y_0 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
#subject to con48: loop2_UF * TC2_2 + TC5_2 <= AP_A_0;
subject to con49: AP_A_0 = loop2_UF * TC2_2  * cte_3;
subject to con50: loop2_UF * TC2_2  <= AP_A_0;
subject to con51: AP_A_0 =  TC5_2 * cte_4;
subject to con52:  TC5_2 <= AP_A_0;
subject to con53: AP_A_0 <= 390;
#subject to con54: 390 = AP_A_0 * cte_5;
subject to con55: AP_A_1 = burst_size_A * constant1;
#subject to con56: TC3_2 + loop4_UF * TC4_2 <= AP_A_1;
subject to con57: AP_A_1 = TC3_2  * cte_6;
subject to con58: TC3_2  <= AP_A_1;
subject to con59: AP_A_1 =  loop4_UF * TC4_2 * cte_7;
subject to con60:  loop4_UF * TC4_2 <= AP_A_1;
subject to con61: AP_A_1 <= 410;
#subject to con62: 410 = AP_A_1 * cte_8;
subject to con63: AP_A_0 * AP_A_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
subject to con64: AP_x_0 = burst_size_x * constant2;
#subject to con65: TC3_2 <= AP_x_0;
subject to con66: AP_x_0 = TC3_2 * cte_9;
subject to con67: TC3_2 <= AP_x_0;
subject to con68: AP_x_0 <= 410;
#subject to con69: 410 = AP_x_0 * cte_10;
subject to con70: AP_x_0 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
subject to con71: AP_tmp_0 = burst_size_tmp * constant3;
#subject to con72: loop1_UF * TC1_2 + loop2_UF * TC2_2 + TC5_2 <= AP_tmp_0;
subject to con73: AP_tmp_0 = loop1_UF * TC1_2  * cte_11;
subject to con74: loop1_UF * TC1_2  <= AP_tmp_0;
subject to con75: AP_tmp_0 =  loop2_UF * TC2_2  * cte_12;
subject to con76:  loop2_UF * TC2_2  <= AP_tmp_0;
subject to con77: AP_tmp_0 =  TC5_2 * cte_13;
subject to con78:  TC5_2 <= AP_tmp_0;
subject to con79: AP_tmp_0 <= 390;
#subject to con80: 390 = AP_tmp_0 * cte_14;
subject to con81: AP_tmp_0 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
subject to con82: transfer_y_S0_under_loop0 * TC0_0 >= transfer_y_S0_under_loop0 * 2;
subject to con83: burst_y_S0_under_loop0 = 1;
subject to con84: transfer_y_S0_under_loop0 + transfer_y_total = 1;
subject to con85: transfer_y_S3_under_loop4 * TC4_0 >= transfer_y_S3_under_loop4 * 2;
subject to con86: burst_y_S3_under_loop4 = 1;
subject to con87: transfer_y_S3_under_loop4 + transfer_y_total = 1;
subject to con88: transfer_A_S2_under_loop2 * TC2_0 >= transfer_A_S2_under_loop2 * 2;
subject to con89: burst_A_S2_under_loop2 = 1;
subject to con90: transfer_A_S2_under_loop3 * TC3_0 >= transfer_A_S2_under_loop3 * 2;
subject to con91: burst_A_S2_under_loop3 = 1;
subject to con92: transfer_A_S2_under_loop2 + transfer_A_S2_under_loop3 + transfer_A_total = 1;
subject to con93: transfer_A_S3_under_loop5 * TC5_0 >= transfer_A_S3_under_loop5 * 2;
subject to con94: burst_A_S3_under_loop5 = 1;
subject to con95: transfer_A_S3_under_loop4 * TC4_0 >= transfer_A_S3_under_loop4 * 2;
subject to con96: burst_A_S3_under_loop4 = 1;
subject to con97: transfer_A_S3_under_loop5 + transfer_A_S3_under_loop4 + transfer_A_total = 1;
subject to con98: transfer_x_S2_under_loop3 * TC3_0 >= transfer_x_S2_under_loop3 * 2;
subject to con99: burst_x_S2_under_loop3 = 1;
subject to con100: transfer_x_S2_under_loop3 + transfer_x_total = 1;
subject to con101: transfer_tmp_S1_under_loop1 * TC1_0 >= transfer_tmp_S1_under_loop1 * 2;
subject to con102: burst_tmp_S1_under_loop1 = 1;
subject to con103: transfer_tmp_S1_under_loop1 + transfer_tmp_total = 1;
subject to con104: transfer_tmp_S2_under_loop2 * TC2_0 >= transfer_tmp_S2_under_loop2 * 2;
subject to con105: burst_tmp_S2_under_loop2 = 1;
subject to con106: transfer_tmp_S2_under_loop2 + transfer_tmp_total = 1;
subject to con107: transfer_tmp_S3_under_loop5 * TC5_0 >= transfer_tmp_S3_under_loop5 * 2;
subject to con108: burst_tmp_S3_under_loop5 = 1;
subject to con109: transfer_tmp_S3_under_loop5 + transfer_tmp_total = 1;
subject to con110: transfer_y_total * footprint_tot_y + transfer_y_S0_under_loop0 * footprint_y_S0 / TC0_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con111: transfer_y_total * footprint_tot_y + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_S1_under_loop1 * footprint_tmp_S1 / TC1_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con112: transfer_y_total * footprint_tot_y + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_A_total * footprint_tot_A + transfer_x_total * footprint_tot_x + transfer_A_S2_under_loop2 * footprint_A_S2 / TC2_0 * 1 + transfer_A_S2_under_loop3 * footprint_A_S2 / TC2_0 * TC3_0 * 1 + transfer_x_S2_under_loop3 * footprint_x_S2 / TC3_0 * 1 + transfer_tmp_S2_under_loop2 * footprint_tmp_S2 / TC2_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con113: transfer_y_total * footprint_tot_y + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_A_total * footprint_tot_A + transfer_y_total * footprint_tot_y + transfer_y_total * footprint_tot_y + transfer_A_total * footprint_tot_A + transfer_tmp_total * footprint_tot_tmp + transfer_y_S3_under_loop4 * footprint_y_S3 / TC4_0 * 1 + transfer_A_S3_under_loop5 * footprint_A_S3 / TC4_0 * TC5_0 * 1 + transfer_A_S3_under_loop4 * footprint_A_S3 / TC4_0 * 1 + transfer_tmp_S3_under_loop5 * footprint_tmp_S3 / TC5_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con114: is_burst_size_y_16 + is_burst_size_y_8 + is_burst_size_y_4 + is_burst_size_y_2 + is_burst_size_y_1 = 1;
subject to con115: burst_size_y = is_burst_size_y_16 * 16 + is_burst_size_y_8 * 8 + is_burst_size_y_4 * 4 + is_burst_size_y_2 * 2 + is_burst_size_y_1 * 1;
subject to con116: AP_y_0 >= is_burst_size_y_16 * 16 + is_burst_size_y_8 * 8 + is_burst_size_y_4 * 4 + is_burst_size_y_2 * 2 + is_burst_size_y_1 * 1;
subject to con117: is_burst_size_y_16 = 0;
subject to con118: is_burst_size_y_8 = 0;
subject to con119: is_burst_size_y_4 = 0;
subject to con120: AP_y_0 = (is_burst_size_y_16 * 16 + is_burst_size_y_8 * 8 + is_burst_size_y_4 * 4 + is_burst_size_y_2 * 2 + is_burst_size_y_1 * 1) * cte_burst_size_y;
subject to con121: is_burst_size_A_16 + is_burst_size_A_8 + is_burst_size_A_4 + is_burst_size_A_2 + is_burst_size_A_1 = 1;
subject to con122: burst_size_A = is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1;
subject to con123: AP_A_1 >= is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1;
subject to con124: is_burst_size_A_16 = 0;
subject to con125: is_burst_size_A_8 = 0;
subject to con126: is_burst_size_A_4 = 0;
subject to con127: AP_A_1 = (is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1) * cte_burst_size_A;
subject to con128: is_burst_size_x_16 + is_burst_size_x_8 + is_burst_size_x_4 + is_burst_size_x_2 + is_burst_size_x_1 = 1;
subject to con129: burst_size_x = is_burst_size_x_16 * 16 + is_burst_size_x_8 * 8 + is_burst_size_x_4 * 4 + is_burst_size_x_2 * 2 + is_burst_size_x_1 * 1;
subject to con130: AP_x_0 >= is_burst_size_x_16 * 16 + is_burst_size_x_8 * 8 + is_burst_size_x_4 * 4 + is_burst_size_x_2 * 2 + is_burst_size_x_1 * 1;
subject to con131: is_burst_size_x_16 = 0;
subject to con132: is_burst_size_x_8 = 0;
subject to con133: is_burst_size_x_4 = 0;
subject to con134: AP_x_0 = (is_burst_size_x_16 * 16 + is_burst_size_x_8 * 8 + is_burst_size_x_4 * 4 + is_burst_size_x_2 * 2 + is_burst_size_x_1 * 1) * cte_burst_size_x;
subject to con135: is_burst_size_tmp_16 + is_burst_size_tmp_8 + is_burst_size_tmp_4 + is_burst_size_tmp_2 + is_burst_size_tmp_1 = 1;
subject to con136: burst_size_tmp = is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1;
subject to con137: AP_tmp_0 >= is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1;
subject to con138: is_burst_size_tmp_16 = 0;
subject to con139: is_burst_size_tmp_8 = 0;
subject to con140: is_burst_size_tmp_4 = 0;
subject to con141: AP_tmp_0 = (is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1) * cte_burst_size_tmp;
#subject to con142: Lat_comm_read_S0 = transfer_y_total * footprint_tot_y/burst_size_y + transfer_y_S0_under_loop0 * 1 * TC0_0 * footprint_y_S0 / TC0_0 / burst_y_S0_under_loop0;
subject to con143: Lat_comm_read_S0 = transfer_y_total * footprint_tot_y/burst_size_y + transfer_y_S0_under_loop0 * 1 * TC0_0 * footprint_y_S0 / TC0_0 / burst_y_S0_under_loop0;
#subject to con144: Lat_comm_write_S0 = transfer_y_S0_under_loop0 * 1 * footprint_y_S0  / burst_y_S0_under_loop0;
subject to con145: Lat_comm_write_S0 = transfer_y_S0_under_loop0 * 1 * footprint_y_S0  / burst_y_S0_under_loop0;
#subject to con146: Lat_comm_read_S1 = transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_tmp_S1_under_loop1 * 1 * TC1_0 * footprint_tmp_S1 / TC1_0 / burst_tmp_S1_under_loop1;
subject to con147: Lat_comm_read_S1 = transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_tmp_S1_under_loop1 * 1 * TC1_0 * footprint_tmp_S1 / TC1_0 / burst_tmp_S1_under_loop1;
#subject to con148: Lat_comm_write_S1 = transfer_tmp_S1_under_loop1 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop1;
subject to con149: Lat_comm_write_S1 = transfer_tmp_S1_under_loop1 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop1;
#subject to con150: Lat_comm_read_S2 = (1 - transfer_A_total ) * transfer_x_total  *  footprint_tot_x/burst_size_x + transfer_A_total  * (1 - transfer_x_total ) *  footprint_tot_A/burst_size_A + transfer_A_total  * transfer_x_total  * (footprint_tot_A/burst_size_A + footprint_tot_x/burst_size_x + abs(footprint_tot_A/burst_size_A - footprint_tot_x/burst_size_x))/2 + (1 - transfer_A_S2_under_loop2 ) * transfer_tmp_S2_under_loop2  *  1  *  TC2_0  *  footprint_tmp_S2 / TC2_0 / burst_tmp_S2_under_loop2 + transfer_A_S2_under_loop2  * (1 - transfer_tmp_S2_under_loop2 ) *  1  *  TC2_0  *  footprint_A_S2 / TC2_0 / burst_A_S2_under_loop2 + transfer_A_S2_under_loop2  * transfer_tmp_S2_under_loop2  * (1*TC2_0*footprint_A_S2/TC2_0/burst_A_S2_under_loop2 + 1*TC2_0*footprint_tmp_S2/TC2_0/burst_tmp_S2_under_loop2 + abs(1*TC2_0*footprint_A_S2/TC2_0/burst_A_S2_under_loop2 - 1*TC2_0*footprint_tmp_S2/TC2_0/burst_tmp_S2_under_loop2))/2 + (1 - transfer_A_S2_under_loop3 ) * transfer_x_S2_under_loop3  *  TC2_0  *  TC3_0  *  footprint_x_S2 / TC3_0 / burst_x_S2_under_loop3 + transfer_A_S2_under_loop3  * (1 - transfer_x_S2_under_loop3 ) *  1  *  TC2_0  *  TC3_0  *  footprint_A_S2 / TC2_0  *  TC3_0 / burst_A_S2_under_loop3 + transfer_A_S2_under_loop3  * transfer_x_S2_under_loop3  * (1*TC2_0*TC3_0*footprint_A_S2/TC2_0*TC3_0/burst_A_S2_under_loop3 + TC2_0*TC3_0*footprint_x_S2/TC3_0/burst_x_S2_under_loop3 + abs(1*TC2_0*TC3_0*footprint_A_S2/TC2_0*TC3_0/burst_A_S2_under_loop3 - TC2_0*TC3_0*footprint_x_S2/TC3_0/burst_x_S2_under_loop3))/2;
subject to con151: Lat_comm_read_S2 = transfer_A_total * footprint_tot_A/burst_size_A + transfer_x_total * footprint_tot_x/burst_size_x + transfer_A_S2_under_loop2 * 1 * TC2_0 * footprint_A_S2 / TC2_0 / burst_A_S2_under_loop2 + transfer_tmp_S2_under_loop2 * 1 * TC2_0 * footprint_tmp_S2 / TC2_0 / burst_tmp_S2_under_loop2 + transfer_A_S2_under_loop3 * 1 * TC2_0 * TC3_0 * footprint_A_S2 / TC2_0 * TC3_0 / burst_A_S2_under_loop3 + transfer_x_S2_under_loop3 * TC2_0 * TC3_0 * footprint_x_S2 / TC3_0 / burst_x_S2_under_loop3;
#subject to con152: Lat_comm_write_S2 = transfer_tmp_S2_under_loop2 * 1 * footprint_tmp_S2  / burst_tmp_S2_under_loop2;
subject to con153: Lat_comm_write_S2 = transfer_tmp_S2_under_loop2 * 1 * footprint_tmp_S2  / burst_tmp_S2_under_loop2;
#subject to con154: Lat_comm_read_S3 = (1 - transfer_y_S3_under_loop4 ) * transfer_A_S3_under_loop4  *  1  *  TC4_0  *  footprint_A_S3 / TC4_0 / burst_A_S3_under_loop4 + transfer_y_S3_under_loop4  * (1 - transfer_A_S3_under_loop4 ) *  1  *  TC4_0  *  footprint_y_S3 / TC4_0 / burst_y_S3_under_loop4 + transfer_y_S3_under_loop4  * transfer_A_S3_under_loop4  * (1*TC4_0*footprint_y_S3/TC4_0/burst_y_S3_under_loop4 + 1*TC4_0*footprint_A_S3/TC4_0/burst_A_S3_under_loop4 + abs(1*TC4_0*footprint_y_S3/TC4_0/burst_y_S3_under_loop4 - 1*TC4_0*footprint_A_S3/TC4_0/burst_A_S3_under_loop4))/2 + (1 - transfer_A_S3_under_loop5 ) * transfer_tmp_S3_under_loop5  *  TC4_0  *  TC5_0  *  footprint_tmp_S3 / TC5_0 / burst_tmp_S3_under_loop5 + transfer_A_S3_under_loop5  * (1 - transfer_tmp_S3_under_loop5 ) *  1  *  TC4_0  *  TC5_0  *  footprint_A_S3 / TC4_0  *  TC5_0 / burst_A_S3_under_loop5 + transfer_A_S3_under_loop5  * transfer_tmp_S3_under_loop5  * (1*TC4_0*TC5_0*footprint_A_S3/TC4_0*TC5_0/burst_A_S3_under_loop5 + TC4_0*TC5_0*footprint_tmp_S3/TC5_0/burst_tmp_S3_under_loop5 + abs(1*TC4_0*TC5_0*footprint_A_S3/TC4_0*TC5_0/burst_A_S3_under_loop5 - TC4_0*TC5_0*footprint_tmp_S3/TC5_0/burst_tmp_S3_under_loop5))/2;
subject to con155: Lat_comm_read_S3 = transfer_y_S3_under_loop4 * 1 * TC4_0 * footprint_y_S3 / TC4_0 / burst_y_S3_under_loop4 + transfer_A_S3_under_loop4 * 1 * TC4_0 * footprint_A_S3 / TC4_0 / burst_A_S3_under_loop4 + transfer_A_S3_under_loop5 * 1 * TC4_0 * TC5_0 * footprint_A_S3 / TC4_0 * TC5_0 / burst_A_S3_under_loop5 + transfer_tmp_S3_under_loop5 * TC4_0 * TC5_0 * footprint_tmp_S3 / TC5_0 / burst_tmp_S3_under_loop5;
#subject to con156: Lat_comm_write_S3 = (1 - transfer_y_total ) * transfer_tmp_total  *  footprint_tot_tmp/burst_size_tmp + transfer_y_total  * (1 - transfer_tmp_total ) *  footprint_tot_y/burst_size_y + transfer_y_total  * transfer_tmp_total  * (footprint_tot_y/burst_size_y + footprint_tot_tmp/burst_size_tmp + abs(footprint_tot_y/burst_size_y - footprint_tot_tmp/burst_size_tmp))/2 + transfer_y_S3_under_loop4 * 1 * footprint_y_S3  / burst_y_S3_under_loop4;
subject to con157: Lat_comm_write_S3 = transfer_y_total * footprint_tot_y/burst_size_y + transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_y_S3_under_loop4 * 1 * footprint_y_S3  / burst_y_S3_under_loop4;
subject to con158: Lat_comm = Lat_comm_read_S0 + Lat_comm_write_S0 + Lat_comm_read_S1 + Lat_comm_write_S1 + Lat_comm_read_S2 + Lat_comm_write_S2 + Lat_comm_read_S3 + Lat_comm_write_S3;
#subject to con159: transfer_y_total * footprint_tot_y / (AP_y_0 * 16000 / size_data_type) + transfer_y_S0_under_loop0 * footprint_y_S0 / (TC0_0 * 1) / (AP_y_0 * 16000 / size_data_type) <= ceil0;
#subject to con160: ceil0 * AP_y_0 <= BRAM;
#subject to con161: transfer_y_total * footprint_tot_y / (AP_y_0 * 16000 / size_data_type) <= ceil1;
#subject to con162: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * 16000 / size_data_type) + transfer_tmp_S1_under_loop1 * footprint_tmp_S1 / (TC1_0 * 1) / (AP_tmp_0 * 16000 / size_data_type) <= ceil2;
#subject to con163: ceil1 * AP_y_0 + ceil2 * AP_tmp_0 <= BRAM;
#subject to con164: transfer_y_total * footprint_tot_y / (AP_y_0 * 16000 / size_data_type) <= ceil3;
#subject to con165: transfer_A_total * footprint_tot_A / (AP_A_0 * 16000 / size_data_type) + transfer_A_S2_under_loop2 * footprint_A_S2 / (TC2_0 * 1) / (AP_A_0 * 16000 / size_data_type) + transfer_A_S2_under_loop3 * footprint_A_S2 / (TC2_0 * TC3_0 * 1) / (AP_A_0 * 16000 / size_data_type) <= ceil4;
#subject to con166: transfer_x_total * footprint_tot_x / (AP_x_0 * 16000 / size_data_type) + transfer_x_S2_under_loop3 * footprint_x_S2 / (TC3_0 * 1) / (AP_x_0 * 16000 / size_data_type) <= ceil5;
#subject to con167: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * 16000 / size_data_type) + transfer_tmp_S2_under_loop2 * footprint_tmp_S2 / (TC2_0 * 1) / (AP_tmp_0 * 16000 / size_data_type) <= ceil6;
#subject to con168: ceil3 * AP_y_0 + ceil4 * AP_A_0 + ceil5 * AP_x_0 + ceil6 * AP_tmp_0 <= BRAM;
#subject to con169: transfer_y_total * footprint_tot_y / (AP_y_0 * 16000 / size_data_type) + transfer_y_S3_under_loop4 * footprint_y_S3 / (TC4_0 * 1) / (AP_y_0 * 16000 / size_data_type) <= ceil7;
#subject to con170: transfer_A_total * footprint_tot_A / (AP_A_0 * 16000 / size_data_type) + transfer_A_S3_under_loop4 * footprint_A_S3 / (TC4_0 * 1) / (AP_A_0 * 16000 / size_data_type) + transfer_A_S3_under_loop5 * footprint_A_S3 / (TC4_0 * TC5_0 * 1) / (AP_A_0 * 16000 / size_data_type) <= ceil8;
#subject to con171: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * 16000 / size_data_type) + transfer_tmp_S3_under_loop5 * footprint_tmp_S3 / (TC5_0 * 1) / (AP_tmp_0 * 16000 / size_data_type) <= ceil9;
#subject to con172: ceil7 * AP_y_0 + ceil8 * AP_A_0 + ceil9 * AP_tmp_0 <= BRAM;
#subject to con173: ceil0 * AP_y_0 + ceil1 * AP_y_0 + ceil2 * AP_tmp_0 + ceil3 * AP_y_0 + ceil4 * AP_A_0 + ceil5 * AP_x_0 + ceil6 * AP_tmp_0 + ceil7 * AP_y_0 + ceil8 * AP_A_0 + ceil9 * AP_tmp_0 <= BRAM;
solve;
display TC0_0;
display TC0_1;
display TC0_2;
display TC1_0;
display TC1_1;
display TC1_2;
display TC2_0;
display TC2_1;
display TC2_2;
display TC3_0;
display TC3_1;
display TC3_2;
display TC4_0;
display TC4_1;
display TC4_2;
display TC5_0;
display TC5_1;
display TC5_2;
display loop0_UF;
display loop1_UF;
display loop2_UF;
display loop4_UF;
display Lat_comp_S0;
display Lat_comp_S0_no_tree;
display Lat_comp_S1;
display Lat_comp_S1_no_tree;
display Lat_comp_S2;
display Lat_comp_S2_no_tree;
display Lat_comp_S3;
display Lat_comp_S3_no_tree;
display II_S0;
display II_S1;
display II_S2;
display II_S3;
display is_loop0_pip;
display is_loop1_pip;
display is_loop2_pip;
display is_loop3_pip;
display is_loop4_pip;
display is_loop5_pip;
display AP_y_0;
display constant0;
display cte_0;
display cte_1;
display cte_2;
display AP_A_0;
display cte_3;
display cte_4;
display cte_5;
display AP_A_1;
display constant1;
display cte_6;
display cte_7;
display cte_8;
display AP_x_0;
display constant2;
display cte_9;
display cte_10;
display AP_tmp_0;
display constant3;
display cte_11;
display cte_12;
display cte_13;
display cte_14;
display Lat_comm;
display transfer_y_total;
display transfer_A_total;
display transfer_x_total;
display transfer_tmp_total;
display transfer_y_S0_under_loop0;
display burst_y_S0_under_loop0;
display transfer_y_S3_under_loop4;
display burst_y_S3_under_loop4;
display transfer_A_S2_under_loop2;
display burst_A_S2_under_loop2;
display transfer_A_S2_under_loop3;
display burst_A_S2_under_loop3;
display transfer_A_S3_under_loop5;
display burst_A_S3_under_loop5;
display transfer_A_S3_under_loop4;
display burst_A_S3_under_loop4;
display transfer_x_S2_under_loop3;
display burst_x_S2_under_loop3;
display transfer_tmp_S1_under_loop1;
display burst_tmp_S1_under_loop1;
display transfer_tmp_S2_under_loop2;
display burst_tmp_S2_under_loop2;
display transfer_tmp_S3_under_loop5;
display burst_tmp_S3_under_loop5;
display burst_size_y;
display cte_burst_size_y;
display is_burst_size_y_16;
display is_burst_size_y_8;
display is_burst_size_y_4;
display is_burst_size_y_2;
display is_burst_size_y_1;
display burst_size_A;
display cte_burst_size_A;
display is_burst_size_A_16;
display is_burst_size_A_8;
display is_burst_size_A_4;
display is_burst_size_A_2;
display is_burst_size_A_1;
display burst_size_x;
display cte_burst_size_x;
display is_burst_size_x_16;
display is_burst_size_x_8;
display is_burst_size_x_4;
display is_burst_size_x_2;
display is_burst_size_x_1;
display burst_size_tmp;
display cte_burst_size_tmp;
display is_burst_size_tmp_16;
display is_burst_size_tmp_8;
display is_burst_size_tmp_4;
display is_burst_size_tmp_2;
display is_burst_size_tmp_1;
display Lat_comm_read_S0;;
display Lat_comm_write_S0;;
display Lat_comm_read_S1;;
display Lat_comm_write_S1;;
display Lat_comm_read_S2;;
display Lat_comm_write_S2;;
display Lat_comm_read_S3;;
display Lat_comm_write_S3;;
display ceil0;
display ceil1;
display ceil2;
display ceil3;
display ceil4;
display ceil5;
display ceil6;
display ceil7;
display ceil8;
display ceil9;
display _total_solve_time;
