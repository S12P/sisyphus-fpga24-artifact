option solver gurobi;
option gurobi_options 'lim:time=14400 tech:logfile=gurobi.log qp:nonconvex=2 mip:gap=0.0000000001';

#Size array A: [180, 210]
#Size array D: [180, 220]
#Size array tmp: [180, 190]
#Size array C: [190, 220]
#Size array B: [210, 190]
#loop_0 iterates Array tmp in dim 0
#loop_1 iterates Array tmp in dim 1
#loop_2 iterates Array tmp in dim 0
#loop_3 iterates Array tmp in dim 1
#loop_2 iterates Array A in dim 0
#loop_4 iterates Array A in dim 1
#loop_3 iterates Array B in dim 1
#loop_4 iterates Array B in dim 0
#loop_2 iterates Array tmp in dim 0
#loop_3 iterates Array tmp in dim 1
#loop_5 iterates Array D in dim 0
#loop_6 iterates Array D in dim 1
#loop_5 iterates Array D in dim 0
#loop_6 iterates Array D in dim 1
#loop_7 iterates Array D in dim 0
#loop_8 iterates Array D in dim 1
#loop_7 iterates Array tmp in dim 0
#loop_9 iterates Array tmp in dim 1
#loop_8 iterates Array C in dim 1
#loop_9 iterates Array C in dim 0
#loop_7 iterates Array D in dim 0
#loop_8 iterates Array D in dim 1
#schedule 0 0 0 1 0
#iterators i j
#loop_0 := False
#loop_1 := False
#schedule 1 2 0 3 0 4 0
#iterators i j k
#loop_2 := False
#loop_3 := False
#loop_4 := True
#schedule 2 5 0 6 0
#iterators i j
#loop_5 := False
#loop_6 := False
#schedule 3 7 0 8 0 9 0
#iterators i j k
#loop_7 := False
#loop_8 := False
#loop_9 := True
param DSP_avail = 1300;
param ON_CHIP_MEM_SIZE = 360000;
param CONSTRAINT_ARRAY_PARTITIONING_VALUE = 128;
param BRAM = 4320;
param size_data_type = 32;
param optimist_reuse_dsp=0;
param TC0 = 180;
param TC1 = 190;
param TC2 = 180;
param TC3 = 190;
param TC4 = 210;
param TC5 = 180;
param TC6 = 220;
param TC7 = 180;
param TC8 = 220;
param TC9 = 190;
param TREE_REDUCTION=1;
param IL_par_S0 = 1;
param IL_seq_S0 = 0;
param IL_par_S1 = 12;
param IL_seq_S1 = 7;
param IL_par_S2 = 6;
param IL_seq_S2 = 0;
param IL_par_S3 = 6;
param IL_seq_S3 = 7;
param DSP_S0 = 0;
param DSP_S1 = 8;
param DSP_S2 = 3;
param DSP_S3 = 5;
param footprint_tmp_S0 = 34200;
param footprint_tmp_S1 = 34200;
param footprint_A_S1 = 37800;
param footprint_B_S1 = 39900;
param footprint_D_S2 = 39600;
param footprint_D_S3 = 39600;
param footprint_tmp_S3 = 34200;
param footprint_C_S3 = 41800;
param footprint_tot_A = 37800;
param burst_size_tot_A = 2;
param footprint_tot_D = 39600;
param burst_size_tot_D = 4;
param footprint_tot_tmp = 34200;
param burst_size_tot_tmp = 2;
param footprint_tot_C = 41800;
param burst_size_tot_C = 4;
param footprint_tot_B = 39900;
param burst_size_tot_B = 2;

var TC0_0 integer >= 1 <=TC0;
var TC0_1 integer >= 1 <=TC0;
var TC0_2 integer >= 1 <=TC0;
var TC1_0 integer >= 1 <=TC1;
var TC1_1 integer >= 1 <=TC1;
var TC1_2 integer >= 1 <=TC1;
var TC2_0 integer >= 1 <=TC2;
var TC2_1 integer >= 1 <=TC2;
var TC2_2 integer >= 1 <=TC2;
var TC3_0 integer >= 1 <=TC3;
var TC3_1 integer >= 1 <=TC3;
var TC3_2 integer >= 1 <=TC3;
var TC4_0 integer >= 1 <=TC4;
var TC4_1 integer >= 1 <=TC4;
var TC4_2 integer >= 1 <=TC4;
var TC5_0 integer >= 1 <=TC5;
var TC5_1 integer >= 1 <=TC5;
var TC5_2 integer >= 1 <=TC5;
var TC6_0 integer >= 1 <=TC6;
var TC6_1 integer >= 1 <=TC6;
var TC6_2 integer >= 1 <=TC6;
var TC7_0 integer >= 1 <=TC7;
var TC7_1 integer >= 1 <=TC7;
var TC7_2 integer >= 1 <=TC7;
var TC8_0 integer >= 1 <=TC8;
var TC8_1 integer >= 1 <=TC8;
var TC8_2 integer >= 1 <=TC8;
var TC9_0 integer >= 1 <=TC9;
var TC9_1 integer >= 1 <=TC9;
var TC9_2 integer >= 1 <=TC9;
var loop0_UF integer >= 1 <=TC0;
var loop1_UF integer >= 1 <=TC1;
var loop2_UF integer >= 1 <=TC2;
var loop3_UF integer >= 1 <=TC3;
var loop5_UF integer >= 1 <=TC5;
var loop6_UF integer >= 1 <=TC6;
var loop7_UF integer >= 1 <=TC7;
var loop8_UF integer >= 1 <=TC8;
var Lat_comp_S0 >= 0;
var Lat_comp_S0_no_tree >= 0;
var Lat_comp_S1 >= 0;
var Lat_comp_S1_no_tree >= 0;
var Lat_comp_S2 >= 0;
var Lat_comp_S2_no_tree >= 0;
var Lat_comp_S3 >= 0;
var Lat_comp_S3_no_tree >= 0;
var II_S0 integer >= 1;
var II_S1 integer >= 1;
var II_S2 integer >= 1;
var II_S3 integer >= 1;
var is_loop0_pip binary;
var is_loop1_pip binary;
var is_loop2_pip binary;
var is_loop3_pip binary;
var is_loop4_pip binary;
var is_loop5_pip binary;
var is_loop6_pip binary;
var is_loop7_pip binary;
var is_loop8_pip binary;
var is_loop9_pip binary;
var AP_A_0 integer >= 1;
var cte_0 integer >= 1;
var cte_1 integer >= 1;
var AP_A_1 integer >= 1;
var constant0 integer >= 1;
var cte_2 integer >= 1;
var cte_3 integer >= 1;
var AP_D_0 integer >= 1;
var cte_4 integer >= 1;
var cte_5 integer >= 1;
var cte_6 integer >= 1;
var AP_D_1 integer >= 1;
var constant1 integer >= 1;
var cte_7 integer >= 1;
var cte_8 integer >= 1;
var cte_9 integer >= 1;
var AP_tmp_0 integer >= 1;
var cte_10 integer >= 1;
var cte_11 integer >= 1;
var cte_12 integer >= 1;
var cte_13 integer >= 1;
var AP_tmp_1 integer >= 1;
var constant2 integer >= 1;
var cte_14 integer >= 1;
var cte_15 integer >= 1;
var cte_16 integer >= 1;
var cte_17 integer >= 1;
var AP_C_0 integer >= 1;
var cte_18 integer >= 1;
var cte_19 integer >= 1;
var AP_C_1 integer >= 1;
var constant3 integer >= 1;
var cte_20 integer >= 1;
var cte_21 integer >= 1;
var AP_B_0 integer >= 1;
var cte_22 integer >= 1;
var cte_23 integer >= 1;
var AP_B_1 integer >= 1;
var constant4 integer >= 1;
var cte_24 integer >= 1;
var cte_25 integer >= 1;
var Lat_comm >= 0;
var transfer_A_total binary;
var transfer_D_total binary;
var transfer_tmp_total binary;
var transfer_C_total binary;
var transfer_B_total binary;
var transfer_A_S1_under_loop2 binary;
var burst_A_S1_under_loop2 integer >= 1 <=burst_size_tot_A;
var transfer_A_S1_under_loop4 binary;
var burst_A_S1_under_loop4 integer >= 1 <=burst_size_tot_A;
var transfer_D_S2_under_loop5 binary;
var burst_D_S2_under_loop5 integer >= 1 <=burst_size_tot_D;
var transfer_D_S2_under_loop6 binary;
var burst_D_S2_under_loop6 integer >= 1 <=burst_size_tot_D;
var transfer_D_S3_under_loop7 binary;
var burst_D_S3_under_loop7 integer >= 1 <=burst_size_tot_D;
var transfer_D_S3_under_loop8 binary;
var burst_D_S3_under_loop8 integer >= 1 <=burst_size_tot_D;
var transfer_tmp_S0_under_loop0 binary;
var burst_tmp_S0_under_loop0 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S0_under_loop1 binary;
var burst_tmp_S0_under_loop1 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S1_under_loop2 binary;
var burst_tmp_S1_under_loop2 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S1_under_loop3 binary;
var burst_tmp_S1_under_loop3 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S3_under_loop7 binary;
var burst_tmp_S3_under_loop7 integer >= 1 <=burst_size_tot_tmp;
var transfer_tmp_S3_under_loop9 binary;
var burst_tmp_S3_under_loop9 integer >= 1 <=burst_size_tot_tmp;
var transfer_C_S3_under_loop8 binary;
var burst_C_S3_under_loop8 integer >= 1 <=burst_size_tot_C;
var transfer_C_S3_under_loop9 binary;
var burst_C_S3_under_loop9 integer >= 1 <=burst_size_tot_C;
var transfer_B_S1_under_loop3 binary;
var burst_B_S1_under_loop3 integer >= 1 <=burst_size_tot_B;
var transfer_B_S1_under_loop4 binary;
var burst_B_S1_under_loop4 integer >= 1 <=burst_size_tot_B;
var burst_size_A integer >= 1 <=2;
var cte_burst_size_A integer >= 1;
var is_burst_size_A_16 binary;
var is_burst_size_A_8 binary;
var is_burst_size_A_4 binary;
var is_burst_size_A_2 binary;
var is_burst_size_A_1 binary;
var burst_size_D integer >= 1 <=4;
var cte_burst_size_D integer >= 1;
var is_burst_size_D_16 binary;
var is_burst_size_D_8 binary;
var is_burst_size_D_4 binary;
var is_burst_size_D_2 binary;
var is_burst_size_D_1 binary;
var burst_size_tmp integer >= 1 <=2;
var cte_burst_size_tmp integer >= 1;
var is_burst_size_tmp_16 binary;
var is_burst_size_tmp_8 binary;
var is_burst_size_tmp_4 binary;
var is_burst_size_tmp_2 binary;
var is_burst_size_tmp_1 binary;
var burst_size_C integer >= 1 <=4;
var cte_burst_size_C integer >= 1;
var is_burst_size_C_16 binary;
var is_burst_size_C_8 binary;
var is_burst_size_C_4 binary;
var is_burst_size_C_2 binary;
var is_burst_size_C_1 binary;
var burst_size_B integer >= 1 <=2;
var cte_burst_size_B integer >= 1;
var is_burst_size_B_16 binary;
var is_burst_size_B_8 binary;
var is_burst_size_B_4 binary;
var is_burst_size_B_2 binary;
var is_burst_size_B_1 binary;
var Lat_comm_read_S0;
var Lat_comm_write_S0;
var Lat_comm_read_S1;
var Lat_comm_write_S1;
var Lat_comm_read_S2;
var Lat_comm_write_S2;
var Lat_comm_read_S3;
var Lat_comm_write_S3;
var ceil0 integer >= 0;
var ceil1 integer >= 0;
var ceil2 integer >= 0;
var ceil3 integer >= 0;
var ceil4 integer >= 0;
var ceil5 integer >= 0;
var ceil6 integer >= 0;
var ceil7 integer >= 0;
var ceil8 integer >= 0;

minimize cost: Lat_comp_S0 + Lat_comp_S1 + Lat_comp_S2 + Lat_comp_S3 + Lat_comm;

subject to con0: TC0 = TC0_0 * TC0_1 * TC0_2;
subject to con1: TC1 = TC1_0 * TC1_1 * TC1_2;
subject to con2: TC2 = TC2_0 * TC2_1 * TC2_2;
subject to con3: TC3 = TC3_0 * TC3_1 * TC3_2;
subject to con4: TC4 = TC4_0 * TC4_1 * TC4_2;
subject to con5: TC5 = TC5_0 * TC5_1 * TC5_2;
subject to con6: TC6 = TC6_0 * TC6_1 * TC6_2;
subject to con7: TC7 = TC7_0 * TC7_1 * TC7_2;
subject to con8: TC8 = TC8_0 * TC8_1 * TC8_2;
subject to con9: TC9 = TC9_0 * TC9_1 * TC9_2;
subject to con10: loop0_UF = 1;
subject to con11: loop1_UF = 1;
subject to con12: loop2_UF = 1;
subject to con13: loop3_UF = 1;
subject to con14: loop5_UF = 1;
subject to con15: loop6_UF = 1;
subject to con16: loop7_UF = 1;
subject to con17: loop8_UF = 1;
subject to con18: DSP_S1 * TC2_2 * TC3_2 * TC4_2 * loop2_UF * loop3_UF <= DSP_avail * II_S1;
subject to con19: DSP_S2 * TC5_2 * TC6_2 * loop5_UF * loop6_UF <= DSP_avail * II_S2;
subject to con20: DSP_S3 * TC7_2 * TC8_2 * TC9_2 * loop7_UF * loop8_UF <= DSP_avail * II_S3;
subject to con21: (1-optimist_reuse_dsp) * (DSP_S1 * TC2_2 * TC3_2 * TC4_2 * loop2_UF * loop3_UF) / II_S1 + (DSP_S2 * TC5_2 * TC6_2 * loop5_UF * loop6_UF) / II_S2 + (DSP_S3 * TC7_2 * TC8_2 * TC9_2 * loop7_UF * loop8_UF) / II_S3 <= DSP_avail;
subject to con22: loop0_UF <= TC0_0;
subject to con23: loop1_UF <= TC1_0;
subject to con24: Lat_comp_S0 = TREE_REDUCTION * (TC0_0 / loop0_UF * TC1_0 / loop1_UF * (IL_par_S0 + II_S0 * (TC0_1 * TC1_1 - 1))) + (1-TREE_REDUCTION) * (TC0_0 / loop0_UF * TC1_0 / loop1_UF * (IL_par_S0 + II_S0 * (TC0_1 * TC1_1 - 1))) ;
subject to con25: loop2_UF <= TC2_0;
subject to con26: loop3_UF <= TC3_0;
subject to con27: Lat_comp_S1 = TREE_REDUCTION * (TC2_0 / loop2_UF * TC3_0 / loop3_UF * TC4_0 * (IL_par_S1 + IL_seq_S1 * log(TC4_2)/log(2) + II_S1 * (TC2_1 * TC3_1 * TC4_1 - 1))) + (1-TREE_REDUCTION) * (TC2_0 / loop2_UF * TC3_0 / loop3_UF * TC4_0 * (IL_par_S1 + IL_seq_S1 * TC4_2 + II_S1 * (TC2_1 * TC3_1 * TC4_1 - 1))) ;
subject to con28: loop5_UF <= TC5_0;
subject to con29: loop6_UF <= TC6_0;
subject to con30: Lat_comp_S2 = TREE_REDUCTION * (TC5_0 / loop5_UF * TC6_0 / loop6_UF * (IL_par_S2 + II_S2 * (TC5_1 * TC6_1 - 1))) + (1-TREE_REDUCTION) * (TC5_0 / loop5_UF * TC6_0 / loop6_UF * (IL_par_S2 + II_S2 * (TC5_1 * TC6_1 - 1))) ;
subject to con31: loop7_UF <= TC7_0;
subject to con32: loop8_UF <= TC8_0;
subject to con33: Lat_comp_S3 = TREE_REDUCTION * (TC7_0 / loop7_UF * TC8_0 / loop8_UF * TC9_0 * (IL_par_S3 + IL_seq_S3 * log(TC9_2)/log(2) + II_S3 * (TC7_1 * TC8_1 * TC9_1 - 1))) + (1-TREE_REDUCTION) * (TC7_0 / loop7_UF * TC8_0 / loop8_UF * TC9_0 * (IL_par_S3 + IL_seq_S3 * TC9_2 + II_S3 * (TC7_1 * TC8_1 * TC9_1 - 1))) ;
subject to con34: II_S0 = 1;
subject to con35: is_loop0_pip * TC1_1 = is_loop0_pip * 1;
subject to con36: is_loop0_pip * TC0_1 >= is_loop0_pip * 2;
subject to con37: is_loop1_pip * TC0_1 = is_loop1_pip * 1;
subject to con38: is_loop1_pip * TC1_1 >= is_loop1_pip * 2;
subject to con39: is_loop0_pip + is_loop1_pip = 1;
subject to con40: is_loop2_pip * TC3_1 * TC4_1 = is_loop2_pip * 1;
subject to con41: is_loop2_pip * TC2_1 >= is_loop2_pip * 2;
subject to con42: is_loop3_pip * TC2_1 * TC4_1 = is_loop3_pip * 1;
subject to con43: is_loop3_pip * TC3_1 >= is_loop3_pip * 2;
subject to con44: is_loop4_pip * TC2_1 * TC3_1 = is_loop4_pip * 1;
subject to con45: is_loop4_pip * TC4_1 >= is_loop4_pip * 2;
subject to con46: is_loop2_pip + is_loop3_pip + is_loop4_pip = 1;
subject to con47: II_S1 = 1 * is_loop2_pip + 1 * is_loop3_pip + 6 * is_loop4_pip * TREE_REDUCTION + 7 * TC4_2 * is_loop4_pip * (1 - TREE_REDUCTION);
subject to con48: II_S2 = 1;
subject to con49: is_loop5_pip * TC6_1 = is_loop5_pip * 1;
subject to con50: is_loop5_pip * TC5_1 >= is_loop5_pip * 2;
subject to con51: is_loop6_pip * TC5_1 = is_loop6_pip * 1;
subject to con52: is_loop6_pip * TC6_1 >= is_loop6_pip * 2;
subject to con53: is_loop5_pip + is_loop6_pip = 1;
subject to con54: is_loop7_pip * TC8_1 * TC9_1 = is_loop7_pip * 1;
subject to con55: is_loop7_pip * TC7_1 >= is_loop7_pip * 2;
subject to con56: is_loop8_pip * TC7_1 * TC9_1 = is_loop8_pip * 1;
subject to con57: is_loop8_pip * TC8_1 >= is_loop8_pip * 2;
subject to con58: is_loop9_pip * TC7_1 * TC8_1 = is_loop9_pip * 1;
subject to con59: is_loop9_pip * TC9_1 >= is_loop9_pip * 2;
subject to con60: is_loop7_pip + is_loop8_pip + is_loop9_pip = 1;
subject to con61: II_S3 = 1 * is_loop7_pip + 1 * is_loop8_pip + 6 * is_loop9_pip * TREE_REDUCTION + 7 * TC9_2 * is_loop9_pip * (1 - TREE_REDUCTION);
#subject to con62: loop2_UF * TC2_2 <= AP_A_0;
subject to con63: AP_A_0 = loop2_UF * TC2_2 * cte_0;
subject to con64: loop2_UF * TC2_2 <= AP_A_0;
subject to con65: AP_A_0 <= 180;
#subject to con66: 180 = AP_A_0 * cte_1;
subject to con67: AP_A_1 = burst_size_A * constant0;
#subject to con68: TC4_2 <= AP_A_1;
subject to con69: AP_A_1 = TC4_2 * cte_2;
subject to con70: TC4_2 <= AP_A_1;
subject to con71: AP_A_1 <= 210;
#subject to con72: 210 = AP_A_1 * cte_3;
subject to con73: AP_A_0 * AP_A_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
#subject to con74: loop5_UF * TC5_2 + loop7_UF * TC7_2 <= AP_D_0;
subject to con75: AP_D_0 = loop5_UF * TC5_2  * cte_4;
subject to con76: loop5_UF * TC5_2  <= AP_D_0;
subject to con77: AP_D_0 =  loop7_UF * TC7_2 * cte_5;
subject to con78:  loop7_UF * TC7_2 <= AP_D_0;
subject to con79: AP_D_0 <= 180;
#subject to con80: 180 = AP_D_0 * cte_6;
subject to con81: AP_D_1 = burst_size_D * constant1;
#subject to con82: loop6_UF * TC6_2 + loop8_UF * TC8_2 <= AP_D_1;
subject to con83: AP_D_1 = loop6_UF * TC6_2  * cte_7;
subject to con84: loop6_UF * TC6_2  <= AP_D_1;
subject to con85: AP_D_1 =  loop8_UF * TC8_2 * cte_8;
subject to con86:  loop8_UF * TC8_2 <= AP_D_1;
subject to con87: AP_D_1 <= 220;
#subject to con88: 220 = AP_D_1 * cte_9;
subject to con89: AP_D_0 * AP_D_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
#subject to con90: loop0_UF * TC0_2 + loop2_UF * TC2_2 + loop7_UF * TC7_2 <= AP_tmp_0;
subject to con91: AP_tmp_0 = loop0_UF * TC0_2  * cte_10;
subject to con92: loop0_UF * TC0_2  <= AP_tmp_0;
subject to con93: AP_tmp_0 =  loop2_UF * TC2_2  * cte_11;
subject to con94:  loop2_UF * TC2_2  <= AP_tmp_0;
subject to con95: AP_tmp_0 =  loop7_UF * TC7_2 * cte_12;
subject to con96:  loop7_UF * TC7_2 <= AP_tmp_0;
subject to con97: AP_tmp_0 <= 180;
#subject to con98: 180 = AP_tmp_0 * cte_13;
subject to con99: AP_tmp_1 = burst_size_tmp * constant2;
#subject to con100: loop1_UF * TC1_2 + loop3_UF * TC3_2 + TC9_2 <= AP_tmp_1;
subject to con101: AP_tmp_1 = loop1_UF * TC1_2  * cte_14;
subject to con102: loop1_UF * TC1_2  <= AP_tmp_1;
subject to con103: AP_tmp_1 =  loop3_UF * TC3_2  * cte_15;
subject to con104:  loop3_UF * TC3_2  <= AP_tmp_1;
subject to con105: AP_tmp_1 =  TC9_2 * cte_16;
subject to con106:  TC9_2 <= AP_tmp_1;
subject to con107: AP_tmp_1 <= 190;
#subject to con108: 190 = AP_tmp_1 * cte_17;
subject to con109: AP_tmp_0 * AP_tmp_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
#subject to con110: TC9_2 <= AP_C_0;
subject to con111: AP_C_0 = TC9_2 * cte_18;
subject to con112: TC9_2 <= AP_C_0;
subject to con113: AP_C_0 <= 190;
#subject to con114: 190 = AP_C_0 * cte_19;
subject to con115: AP_C_1 = burst_size_C * constant3;
#subject to con116: loop8_UF * TC8_2 <= AP_C_1;
subject to con117: AP_C_1 = loop8_UF * TC8_2 * cte_20;
subject to con118: loop8_UF * TC8_2 <= AP_C_1;
subject to con119: AP_C_1 <= 220;
#subject to con120: 220 = AP_C_1 * cte_21;
subject to con121: AP_C_0 * AP_C_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
#subject to con122: TC4_2 <= AP_B_0;
subject to con123: AP_B_0 = TC4_2 * cte_22;
subject to con124: TC4_2 <= AP_B_0;
subject to con125: AP_B_0 <= 210;
#subject to con126: 210 = AP_B_0 * cte_23;
subject to con127: AP_B_1 = burst_size_B * constant4;
#subject to con128: loop3_UF * TC3_2 <= AP_B_1;
subject to con129: AP_B_1 = loop3_UF * TC3_2 * cte_24;
subject to con130: loop3_UF * TC3_2 <= AP_B_1;
subject to con131: AP_B_1 <= 190;
#subject to con132: 190 = AP_B_1 * cte_25;
subject to con133: AP_B_0 * AP_B_1 <= CONSTRAINT_ARRAY_PARTITIONING_VALUE;
subject to con134: transfer_A_S1_under_loop2 * TC2_0 >= transfer_A_S1_under_loop2 * 2;
subject to con135: burst_A_S1_under_loop2 = 1;
subject to con136: transfer_A_S1_under_loop4 * TC4_0 >= transfer_A_S1_under_loop4 * 2;
subject to con137: burst_A_S1_under_loop4 = 1;
subject to con138: transfer_A_S1_under_loop2 + transfer_A_S1_under_loop4 + transfer_A_total = 1;
subject to con139: transfer_D_S2_under_loop5 * TC5_0 >= transfer_D_S2_under_loop5 * 2;
subject to con140: burst_D_S2_under_loop5 = 1;
subject to con141: transfer_D_S2_under_loop6 * TC6_0 >= transfer_D_S2_under_loop6 * 2;
subject to con142: burst_D_S2_under_loop6 = 1;
subject to con143: transfer_D_S2_under_loop5 + transfer_D_S2_under_loop6 + transfer_D_total = 1;
subject to con144: transfer_D_S3_under_loop7 * TC7_0 >= transfer_D_S3_under_loop7 * 2;
subject to con145: burst_D_S3_under_loop7 = 1;
subject to con146: transfer_D_S3_under_loop8 * TC8_0 >= transfer_D_S3_under_loop8 * 2;
subject to con147: burst_D_S3_under_loop8 = 1;
subject to con148: transfer_D_S3_under_loop7 + transfer_D_S3_under_loop8 + transfer_D_total = 1;
subject to con149: transfer_tmp_S0_under_loop0 * TC0_0 >= transfer_tmp_S0_under_loop0 * 2;
subject to con150: burst_tmp_S0_under_loop0 = 1;
subject to con151: transfer_tmp_S0_under_loop1 * TC1_0 >= transfer_tmp_S0_under_loop1 * 2;
subject to con152: burst_tmp_S0_under_loop1 = 1;
subject to con153: transfer_tmp_S0_under_loop0 + transfer_tmp_S0_under_loop1 + transfer_tmp_total = 1;
subject to con154: transfer_tmp_S1_under_loop2 * TC2_0 >= transfer_tmp_S1_under_loop2 * 2;
subject to con155: burst_tmp_S1_under_loop2 = 1;
subject to con156: transfer_tmp_S1_under_loop3 * TC3_0 >= transfer_tmp_S1_under_loop3 * 2;
subject to con157: burst_tmp_S1_under_loop3 = 1;
subject to con158: transfer_tmp_S1_under_loop2 + transfer_tmp_S1_under_loop3 + transfer_tmp_total = 1;
subject to con159: transfer_tmp_S3_under_loop7 * TC7_0 >= transfer_tmp_S3_under_loop7 * 2;
subject to con160: burst_tmp_S3_under_loop7 = 1;
subject to con161: transfer_tmp_S3_under_loop9 * TC9_0 >= transfer_tmp_S3_under_loop9 * 2;
subject to con162: burst_tmp_S3_under_loop9 = 1;
subject to con163: transfer_tmp_S3_under_loop7 + transfer_tmp_S3_under_loop9 + transfer_tmp_total = 1;
subject to con164: transfer_C_S3_under_loop8 * TC8_0 >= transfer_C_S3_under_loop8 * 2;
subject to con165: burst_C_S3_under_loop8 = 1;
subject to con166: transfer_C_S3_under_loop9 * TC9_0 >= transfer_C_S3_under_loop9 * 2;
subject to con167: burst_C_S3_under_loop9 = 1;
subject to con168: transfer_C_S3_under_loop8 + transfer_C_S3_under_loop9 + transfer_C_total = 1;
subject to con169: transfer_B_S1_under_loop3 * TC3_0 >= transfer_B_S1_under_loop3 * 2;
subject to con170: burst_B_S1_under_loop3 = 1;
subject to con171: transfer_B_S1_under_loop4 * TC4_0 >= transfer_B_S1_under_loop4 * 2;
subject to con172: burst_B_S1_under_loop4 = 1;
subject to con173: transfer_B_S1_under_loop3 + transfer_B_S1_under_loop4 + transfer_B_total = 1;
subject to con174: transfer_tmp_total * footprint_tot_tmp + transfer_tmp_S0_under_loop0 * footprint_tmp_S0 / TC0_0 * 1 + transfer_tmp_S0_under_loop1 * footprint_tmp_S0 / TC0_0 * TC1_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con175: transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_A_total * footprint_tot_A + transfer_B_total * footprint_tot_B + transfer_tmp_S1_under_loop2 * footprint_tmp_S1 / TC2_0 * 1 + transfer_tmp_S1_under_loop3 * footprint_tmp_S1 / TC2_0 * TC3_0 * 1 + transfer_B_S1_under_loop3 * footprint_B_S1 / TC3_0 * 1 + transfer_B_S1_under_loop4 * footprint_B_S1 / TC3_0 * TC4_0 * 1 + transfer_A_S1_under_loop2 * footprint_A_S1 / TC2_0 * 1 + transfer_A_S1_under_loop4 * footprint_A_S1 / TC2_0 * TC4_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con176: transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_D_total * footprint_tot_D + transfer_D_total * footprint_tot_D + transfer_D_S2_under_loop5 * footprint_D_S2 / TC5_0 * 1 + transfer_D_S2_under_loop6 * footprint_D_S2 / TC5_0 * TC6_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con177: transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_tmp_total * footprint_tot_tmp + transfer_D_total * footprint_tot_D + transfer_D_total * footprint_tot_D + transfer_D_total * footprint_tot_D + transfer_D_total * footprint_tot_D + transfer_tmp_total * footprint_tot_tmp + transfer_C_total * footprint_tot_C + transfer_tmp_S3_under_loop7 * footprint_tmp_S3 / TC7_0 * 1 + transfer_tmp_S3_under_loop9 * footprint_tmp_S3 / TC7_0 * TC9_0 * 1 + transfer_C_S3_under_loop8 * footprint_C_S3 / TC8_0 * 1 + transfer_C_S3_under_loop9 * footprint_C_S3 / TC8_0 * TC9_0 * 1 + transfer_D_S3_under_loop7 * footprint_D_S3 / TC7_0 * 1 + transfer_D_S3_under_loop8 * footprint_D_S3 / TC7_0 * TC8_0 * 1 <= ON_CHIP_MEM_SIZE;
subject to con178: is_burst_size_A_16 + is_burst_size_A_8 + is_burst_size_A_4 + is_burst_size_A_2 + is_burst_size_A_1 = 1;
subject to con179: burst_size_A = is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1;
subject to con180: AP_A_1 >= is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1;
subject to con181: is_burst_size_A_16 = 0;
subject to con182: is_burst_size_A_8 = 0;
subject to con183: is_burst_size_A_4 = 0;
subject to con184: AP_A_1 = (is_burst_size_A_16 * 16 + is_burst_size_A_8 * 8 + is_burst_size_A_4 * 4 + is_burst_size_A_2 * 2 + is_burst_size_A_1 * 1) * cte_burst_size_A;
subject to con185: is_burst_size_D_16 + is_burst_size_D_8 + is_burst_size_D_4 + is_burst_size_D_2 + is_burst_size_D_1 = 1;
subject to con186: burst_size_D = is_burst_size_D_16 * 16 + is_burst_size_D_8 * 8 + is_burst_size_D_4 * 4 + is_burst_size_D_2 * 2 + is_burst_size_D_1 * 1;
subject to con187: AP_D_1 >= is_burst_size_D_16 * 16 + is_burst_size_D_8 * 8 + is_burst_size_D_4 * 4 + is_burst_size_D_2 * 2 + is_burst_size_D_1 * 1;
subject to con188: is_burst_size_D_16 = 0;
subject to con189: is_burst_size_D_8 = 0;
subject to con190: AP_D_1 = (is_burst_size_D_16 * 16 + is_burst_size_D_8 * 8 + is_burst_size_D_4 * 4 + is_burst_size_D_2 * 2 + is_burst_size_D_1 * 1) * cte_burst_size_D;
subject to con191: is_burst_size_tmp_16 + is_burst_size_tmp_8 + is_burst_size_tmp_4 + is_burst_size_tmp_2 + is_burst_size_tmp_1 = 1;
subject to con192: burst_size_tmp = is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1;
subject to con193: AP_tmp_1 >= is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1;
subject to con194: is_burst_size_tmp_16 = 0;
subject to con195: is_burst_size_tmp_8 = 0;
subject to con196: is_burst_size_tmp_4 = 0;
subject to con197: AP_tmp_1 = (is_burst_size_tmp_16 * 16 + is_burst_size_tmp_8 * 8 + is_burst_size_tmp_4 * 4 + is_burst_size_tmp_2 * 2 + is_burst_size_tmp_1 * 1) * cte_burst_size_tmp;
subject to con198: is_burst_size_C_16 + is_burst_size_C_8 + is_burst_size_C_4 + is_burst_size_C_2 + is_burst_size_C_1 = 1;
subject to con199: burst_size_C = is_burst_size_C_16 * 16 + is_burst_size_C_8 * 8 + is_burst_size_C_4 * 4 + is_burst_size_C_2 * 2 + is_burst_size_C_1 * 1;
subject to con200: AP_C_1 >= is_burst_size_C_16 * 16 + is_burst_size_C_8 * 8 + is_burst_size_C_4 * 4 + is_burst_size_C_2 * 2 + is_burst_size_C_1 * 1;
subject to con201: is_burst_size_C_16 = 0;
subject to con202: is_burst_size_C_8 = 0;
subject to con203: AP_C_1 = (is_burst_size_C_16 * 16 + is_burst_size_C_8 * 8 + is_burst_size_C_4 * 4 + is_burst_size_C_2 * 2 + is_burst_size_C_1 * 1) * cte_burst_size_C;
subject to con204: is_burst_size_B_16 + is_burst_size_B_8 + is_burst_size_B_4 + is_burst_size_B_2 + is_burst_size_B_1 = 1;
subject to con205: burst_size_B = is_burst_size_B_16 * 16 + is_burst_size_B_8 * 8 + is_burst_size_B_4 * 4 + is_burst_size_B_2 * 2 + is_burst_size_B_1 * 1;
subject to con206: AP_B_1 >= is_burst_size_B_16 * 16 + is_burst_size_B_8 * 8 + is_burst_size_B_4 * 4 + is_burst_size_B_2 * 2 + is_burst_size_B_1 * 1;
subject to con207: is_burst_size_B_16 = 0;
subject to con208: is_burst_size_B_8 = 0;
subject to con209: is_burst_size_B_4 = 0;
subject to con210: AP_B_1 = (is_burst_size_B_16 * 16 + is_burst_size_B_8 * 8 + is_burst_size_B_4 * 4 + is_burst_size_B_2 * 2 + is_burst_size_B_1 * 1) * cte_burst_size_B;
#subject to con211: Lat_comm_read_S0 = transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_tmp_S0_under_loop0 * 1 * TC0_0 * footprint_tmp_S0 / TC0_0 / burst_tmp_S0_under_loop0 + transfer_tmp_S0_under_loop1 * 1 * TC0_0 * TC1_0 * footprint_tmp_S0 / TC0_0 * TC1_0 / burst_tmp_S0_under_loop1;
subject to con212: Lat_comm_read_S0 = transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_tmp_S0_under_loop0 * 1 * TC0_0 * footprint_tmp_S0 / TC0_0 / burst_tmp_S0_under_loop0 + transfer_tmp_S0_under_loop1 * 1 * TC0_0 * TC1_0 * footprint_tmp_S0 / TC0_0 * TC1_0 / burst_tmp_S0_under_loop1;
#subject to con213: Lat_comm_write_S0 = transfer_tmp_S0_under_loop0 * 1 * footprint_tmp_S0  / burst_tmp_S0_under_loop0 + transfer_tmp_S0_under_loop1 * 1 * footprint_tmp_S0  / burst_tmp_S0_under_loop1;
subject to con214: Lat_comm_write_S0 = transfer_tmp_S0_under_loop0 * 1 * footprint_tmp_S0  / burst_tmp_S0_under_loop0 + transfer_tmp_S0_under_loop1 * 1 * footprint_tmp_S0  / burst_tmp_S0_under_loop1;
#subject to con215: Lat_comm_read_S1 = (1 - transfer_B_total ) * transfer_A_total  *  footprint_tot_A/burst_size_A + transfer_B_total  * (1 - transfer_A_total ) *  footprint_tot_B/burst_size_B + transfer_B_total  * transfer_A_total  * (footprint_tot_B/burst_size_B + footprint_tot_A/burst_size_A + abs(footprint_tot_B/burst_size_B - footprint_tot_A/burst_size_A))/2 + (1 - transfer_A_S1_under_loop2 ) * transfer_tmp_S1_under_loop2  *  1  *  TC2_0  *  footprint_tmp_S1 / TC2_0 / burst_tmp_S1_under_loop2 + transfer_A_S1_under_loop2  * (1 - transfer_tmp_S1_under_loop2 ) *  1  *  TC2_0  *  footprint_A_S1 / TC2_0 / burst_A_S1_under_loop2 + transfer_A_S1_under_loop2  * transfer_tmp_S1_under_loop2  * (1*TC2_0*footprint_A_S1/TC2_0/burst_A_S1_under_loop2 + 1*TC2_0*footprint_tmp_S1/TC2_0/burst_tmp_S1_under_loop2 + abs(1*TC2_0*footprint_A_S1/TC2_0/burst_A_S1_under_loop2 - 1*TC2_0*footprint_tmp_S1/TC2_0/burst_tmp_S1_under_loop2))/2 + (1 - transfer_tmp_S1_under_loop3 ) * transfer_B_S1_under_loop3  *  TC2_0  *  TC3_0  *  footprint_B_S1 / TC3_0 / burst_B_S1_under_loop3 + transfer_tmp_S1_under_loop3  * (1 - transfer_B_S1_under_loop3 ) *  1  *  TC2_0  *  TC3_0  *  footprint_tmp_S1 / TC2_0  *  TC3_0 / burst_tmp_S1_under_loop3 + transfer_tmp_S1_under_loop3  * transfer_B_S1_under_loop3  * (1*TC2_0*TC3_0*footprint_tmp_S1/TC2_0*TC3_0/burst_tmp_S1_under_loop3 + TC2_0*TC3_0*footprint_B_S1/TC3_0/burst_B_S1_under_loop3 + abs(1*TC2_0*TC3_0*footprint_tmp_S1/TC2_0*TC3_0/burst_tmp_S1_under_loop3 - TC2_0*TC3_0*footprint_B_S1/TC3_0/burst_B_S1_under_loop3))/2 + (1 - transfer_A_S1_under_loop4 ) * transfer_B_S1_under_loop4  *  TC2_0  *  TC3_0  *  TC4_0  *  footprint_B_S1 / TC3_0  *  TC4_0 / burst_B_S1_under_loop4 + transfer_A_S1_under_loop4  * (1 - transfer_B_S1_under_loop4 ) *  TC3_0  *  TC2_0  *  TC4_0  *  footprint_A_S1 / TC2_0  *  TC4_0 / burst_A_S1_under_loop4 + transfer_A_S1_under_loop4  * transfer_B_S1_under_loop4  * (TC3_0*TC2_0*TC4_0*footprint_A_S1/TC2_0*TC4_0/burst_A_S1_under_loop4 + TC2_0*TC3_0*TC4_0*footprint_B_S1/TC3_0*TC4_0/burst_B_S1_under_loop4 + abs(TC3_0*TC2_0*TC4_0*footprint_A_S1/TC2_0*TC4_0/burst_A_S1_under_loop4 - TC2_0*TC3_0*TC4_0*footprint_B_S1/TC3_0*TC4_0/burst_B_S1_under_loop4))/2;
subject to con216: Lat_comm_read_S1 = transfer_B_total * footprint_tot_B/burst_size_B + transfer_A_total * footprint_tot_A/burst_size_A + transfer_A_S1_under_loop2 * 1 * TC2_0 * footprint_A_S1 / TC2_0 / burst_A_S1_under_loop2 + transfer_tmp_S1_under_loop2 * 1 * TC2_0 * footprint_tmp_S1 / TC2_0 / burst_tmp_S1_under_loop2 + transfer_tmp_S1_under_loop3 * 1 * TC2_0 * TC3_0 * footprint_tmp_S1 / TC2_0 * TC3_0 / burst_tmp_S1_under_loop3 + transfer_B_S1_under_loop3 * TC2_0 * TC3_0 * footprint_B_S1 / TC3_0 / burst_B_S1_under_loop3 + transfer_A_S1_under_loop4 * TC3_0 * TC2_0 * TC4_0 * footprint_A_S1 / TC2_0 * TC4_0 / burst_A_S1_under_loop4 + transfer_B_S1_under_loop4 * TC2_0 * TC3_0 * TC4_0 * footprint_B_S1 / TC3_0 * TC4_0 / burst_B_S1_under_loop4;
#subject to con217: Lat_comm_write_S1 = transfer_tmp_S1_under_loop2 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop2 + transfer_tmp_S1_under_loop3 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop3;
subject to con218: Lat_comm_write_S1 = transfer_tmp_S1_under_loop2 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop2 + transfer_tmp_S1_under_loop3 * 1 * footprint_tmp_S1  / burst_tmp_S1_under_loop3;
#subject to con219: Lat_comm_read_S2 = transfer_D_total * footprint_tot_D/burst_size_D + transfer_D_S2_under_loop5 * 1 * TC5_0 * footprint_D_S2 / TC5_0 / burst_D_S2_under_loop5 + transfer_D_S2_under_loop6 * 1 * TC5_0 * TC6_0 * footprint_D_S2 / TC5_0 * TC6_0 / burst_D_S2_under_loop6;
subject to con220: Lat_comm_read_S2 = transfer_D_total * footprint_tot_D/burst_size_D + transfer_D_S2_under_loop5 * 1 * TC5_0 * footprint_D_S2 / TC5_0 / burst_D_S2_under_loop5 + transfer_D_S2_under_loop6 * 1 * TC5_0 * TC6_0 * footprint_D_S2 / TC5_0 * TC6_0 / burst_D_S2_under_loop6;
#subject to con221: Lat_comm_write_S2 = transfer_D_S2_under_loop5 * 1 * footprint_D_S2  / burst_D_S2_under_loop5 + transfer_D_S2_under_loop6 * 1 * footprint_D_S2  / burst_D_S2_under_loop6;
subject to con222: Lat_comm_write_S2 = transfer_D_S2_under_loop5 * 1 * footprint_D_S2  / burst_D_S2_under_loop5 + transfer_D_S2_under_loop6 * 1 * footprint_D_S2  / burst_D_S2_under_loop6;
#subject to con223: Lat_comm_read_S3 = transfer_C_total * footprint_tot_C/burst_size_C + (1 - transfer_D_S3_under_loop7 ) * transfer_tmp_S3_under_loop7  *  1  *  TC7_0  *  footprint_tmp_S3 / TC7_0 / burst_tmp_S3_under_loop7 + transfer_D_S3_under_loop7  * (1 - transfer_tmp_S3_under_loop7 ) *  1  *  TC7_0  *  footprint_D_S3 / TC7_0 / burst_D_S3_under_loop7 + transfer_D_S3_under_loop7  * transfer_tmp_S3_under_loop7  * (1*TC7_0*footprint_D_S3/TC7_0/burst_D_S3_under_loop7 + 1*TC7_0*footprint_tmp_S3/TC7_0/burst_tmp_S3_under_loop7 + abs(1*TC7_0*footprint_D_S3/TC7_0/burst_D_S3_under_loop7 - 1*TC7_0*footprint_tmp_S3/TC7_0/burst_tmp_S3_under_loop7))/2 + (1 - transfer_D_S3_under_loop8 ) * transfer_C_S3_under_loop8  *  TC7_0  *  TC8_0  *  footprint_C_S3 / TC8_0 / burst_C_S3_under_loop8 + transfer_D_S3_under_loop8  * (1 - transfer_C_S3_under_loop8 ) *  1  *  TC7_0  *  TC8_0  *  footprint_D_S3 / TC7_0  *  TC8_0 / burst_D_S3_under_loop8 + transfer_D_S3_under_loop8  * transfer_C_S3_under_loop8  * (1*TC7_0*TC8_0*footprint_D_S3/TC7_0*TC8_0/burst_D_S3_under_loop8 + TC7_0*TC8_0*footprint_C_S3/TC8_0/burst_C_S3_under_loop8 + abs(1*TC7_0*TC8_0*footprint_D_S3/TC7_0*TC8_0/burst_D_S3_under_loop8 - TC7_0*TC8_0*footprint_C_S3/TC8_0/burst_C_S3_under_loop8))/2 + (1 - transfer_tmp_S3_under_loop9 ) * transfer_C_S3_under_loop9  *  TC7_0  *  TC8_0  *  TC9_0  *  footprint_C_S3 / TC8_0  *  TC9_0 / burst_C_S3_under_loop9 + transfer_tmp_S3_under_loop9  * (1 - transfer_C_S3_under_loop9 ) *  TC8_0  *  TC7_0  *  TC9_0  *  footprint_tmp_S3 / TC7_0  *  TC9_0 / burst_tmp_S3_under_loop9 + transfer_tmp_S3_under_loop9  * transfer_C_S3_under_loop9  * (TC8_0*TC7_0*TC9_0*footprint_tmp_S3/TC7_0*TC9_0/burst_tmp_S3_under_loop9 + TC7_0*TC8_0*TC9_0*footprint_C_S3/TC8_0*TC9_0/burst_C_S3_under_loop9 + abs(TC8_0*TC7_0*TC9_0*footprint_tmp_S3/TC7_0*TC9_0/burst_tmp_S3_under_loop9 - TC7_0*TC8_0*TC9_0*footprint_C_S3/TC8_0*TC9_0/burst_C_S3_under_loop9))/2;
subject to con224: Lat_comm_read_S3 = transfer_C_total * footprint_tot_C/burst_size_C + transfer_D_S3_under_loop7 * 1 * TC7_0 * footprint_D_S3 / TC7_0 / burst_D_S3_under_loop7 + transfer_tmp_S3_under_loop7 * 1 * TC7_0 * footprint_tmp_S3 / TC7_0 / burst_tmp_S3_under_loop7 + transfer_D_S3_under_loop8 * 1 * TC7_0 * TC8_0 * footprint_D_S3 / TC7_0 * TC8_0 / burst_D_S3_under_loop8 + transfer_C_S3_under_loop8 * TC7_0 * TC8_0 * footprint_C_S3 / TC8_0 / burst_C_S3_under_loop8 + transfer_tmp_S3_under_loop9 * TC8_0 * TC7_0 * TC9_0 * footprint_tmp_S3 / TC7_0 * TC9_0 / burst_tmp_S3_under_loop9 + transfer_C_S3_under_loop9 * TC7_0 * TC8_0 * TC9_0 * footprint_C_S3 / TC8_0 * TC9_0 / burst_C_S3_under_loop9;
#subject to con225: Lat_comm_write_S3 = (1 - transfer_tmp_total ) * transfer_D_total  *  footprint_tot_D/burst_size_D + transfer_tmp_total  * (1 - transfer_D_total ) *  footprint_tot_tmp/burst_size_tmp + transfer_tmp_total  * transfer_D_total  * (footprint_tot_tmp/burst_size_tmp + footprint_tot_D/burst_size_D + abs(footprint_tot_tmp/burst_size_tmp - footprint_tot_D/burst_size_D))/2 + transfer_D_S3_under_loop7 * 1 * footprint_D_S3  / burst_D_S3_under_loop7 + transfer_D_S3_under_loop8 * 1 * footprint_D_S3  / burst_D_S3_under_loop8;
subject to con226: Lat_comm_write_S3 = transfer_tmp_total * footprint_tot_tmp/burst_size_tmp + transfer_D_total * footprint_tot_D/burst_size_D + transfer_D_S3_under_loop7 * 1 * footprint_D_S3  / burst_D_S3_under_loop7 + transfer_D_S3_under_loop8 * 1 * footprint_D_S3  / burst_D_S3_under_loop8;
subject to con227: Lat_comm = Lat_comm_read_S0 + Lat_comm_write_S0 + Lat_comm_read_S1 + Lat_comm_write_S1 + Lat_comm_read_S2 + Lat_comm_write_S2 + Lat_comm_read_S3 + Lat_comm_write_S3;
#subject to con228: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S0_under_loop0 * footprint_tmp_S0 / (TC0_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S0_under_loop1 * footprint_tmp_S0 / (TC0_0 * TC1_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) <= ceil0;
#subject to con229: ceil0 * AP_tmp_0 * AP_tmp_1 <= BRAM;
#subject to con230: transfer_A_total * footprint_tot_A / (AP_A_0 * AP_A_1 * 16000 / size_data_type) + transfer_A_S1_under_loop2 * footprint_A_S1 / (TC2_0 * 1) / (AP_A_0 * AP_A_1 * 16000 / size_data_type) + transfer_A_S1_under_loop4 * footprint_A_S1 / (TC2_0 * TC4_0 * 1) / (AP_A_0 * AP_A_1 * 16000 / size_data_type) <= ceil1;
#subject to con231: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S1_under_loop2 * footprint_tmp_S1 / (TC2_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S1_under_loop3 * footprint_tmp_S1 / (TC2_0 * TC3_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) <= ceil2;
#subject to con232: transfer_B_total * footprint_tot_B / (AP_B_0 * AP_B_1 * 16000 / size_data_type) + transfer_B_S1_under_loop3 * footprint_B_S1 / (TC3_0 * 1) / (AP_B_0 * AP_B_1 * 16000 / size_data_type) + transfer_B_S1_under_loop4 * footprint_B_S1 / (TC3_0 * TC4_0 * 1) / (AP_B_0 * AP_B_1 * 16000 / size_data_type) <= ceil3;
#subject to con233: ceil1 * AP_A_0 * AP_A_1 + ceil2 * AP_tmp_0 * AP_tmp_1 + ceil3 * AP_B_0 * AP_B_1 <= BRAM;
#subject to con234: transfer_D_total * footprint_tot_D / (AP_D_0 * AP_D_1 * 16000 / size_data_type) + transfer_D_S2_under_loop5 * footprint_D_S2 / (TC5_0 * 1) / (AP_D_0 * AP_D_1 * 16000 / size_data_type) + transfer_D_S2_under_loop6 * footprint_D_S2 / (TC5_0 * TC6_0 * 1) / (AP_D_0 * AP_D_1 * 16000 / size_data_type) <= ceil4;
#subject to con235: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) <= ceil5;
#subject to con236: ceil4 * AP_D_0 * AP_D_1 + ceil5 * AP_tmp_0 * AP_tmp_1 <= BRAM;
#subject to con237: transfer_D_total * footprint_tot_D / (AP_D_0 * AP_D_1 * 16000 / size_data_type) + transfer_D_S3_under_loop7 * footprint_D_S3 / (TC7_0 * 1) / (AP_D_0 * AP_D_1 * 16000 / size_data_type) + transfer_D_S3_under_loop8 * footprint_D_S3 / (TC7_0 * TC8_0 * 1) / (AP_D_0 * AP_D_1 * 16000 / size_data_type) <= ceil6;
#subject to con238: transfer_tmp_total * footprint_tot_tmp / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S3_under_loop7 * footprint_tmp_S3 / (TC7_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) + transfer_tmp_S3_under_loop9 * footprint_tmp_S3 / (TC7_0 * TC9_0 * 1) / (AP_tmp_0 * AP_tmp_1 * 16000 / size_data_type) <= ceil7;
#subject to con239: transfer_C_total * footprint_tot_C / (AP_C_0 * AP_C_1 * 16000 / size_data_type) + transfer_C_S3_under_loop8 * footprint_C_S3 / (TC8_0 * 1) / (AP_C_0 * AP_C_1 * 16000 / size_data_type) + transfer_C_S3_under_loop9 * footprint_C_S3 / (TC8_0 * TC9_0 * 1) / (AP_C_0 * AP_C_1 * 16000 / size_data_type) <= ceil8;
#subject to con240: ceil6 * AP_D_0 * AP_D_1 + ceil7 * AP_tmp_0 * AP_tmp_1 + ceil8 * AP_C_0 * AP_C_1 <= BRAM;
#subject to con241: ceil0 * AP_tmp_0 * AP_tmp_1 + ceil1 * AP_A_0 * AP_A_1 + ceil2 * AP_tmp_0 * AP_tmp_1 + ceil3 * AP_B_0 * AP_B_1 + ceil4 * AP_D_0 * AP_D_1 + ceil5 * AP_tmp_0 * AP_tmp_1 + ceil6 * AP_D_0 * AP_D_1 + ceil7 * AP_tmp_0 * AP_tmp_1 + ceil8 * AP_C_0 * AP_C_1 <= BRAM;
solve;
display TC0_0;
display TC0_1;
display TC0_2;
display TC1_0;
display TC1_1;
display TC1_2;
display TC2_0;
display TC2_1;
display TC2_2;
display TC3_0;
display TC3_1;
display TC3_2;
display TC4_0;
display TC4_1;
display TC4_2;
display TC5_0;
display TC5_1;
display TC5_2;
display TC6_0;
display TC6_1;
display TC6_2;
display TC7_0;
display TC7_1;
display TC7_2;
display TC8_0;
display TC8_1;
display TC8_2;
display TC9_0;
display TC9_1;
display TC9_2;
display loop0_UF;
display loop1_UF;
display loop2_UF;
display loop3_UF;
display loop5_UF;
display loop6_UF;
display loop7_UF;
display loop8_UF;
display Lat_comp_S0;
display Lat_comp_S0_no_tree;
display Lat_comp_S1;
display Lat_comp_S1_no_tree;
display Lat_comp_S2;
display Lat_comp_S2_no_tree;
display Lat_comp_S3;
display Lat_comp_S3_no_tree;
display II_S0;
display II_S1;
display II_S2;
display II_S3;
display is_loop0_pip;
display is_loop1_pip;
display is_loop2_pip;
display is_loop3_pip;
display is_loop4_pip;
display is_loop5_pip;
display is_loop6_pip;
display is_loop7_pip;
display is_loop8_pip;
display is_loop9_pip;
display AP_A_0;
display cte_0;
display cte_1;
display AP_A_1;
display constant0;
display cte_2;
display cte_3;
display AP_D_0;
display cte_4;
display cte_5;
display cte_6;
display AP_D_1;
display constant1;
display cte_7;
display cte_8;
display cte_9;
display AP_tmp_0;
display cte_10;
display cte_11;
display cte_12;
display cte_13;
display AP_tmp_1;
display constant2;
display cte_14;
display cte_15;
display cte_16;
display cte_17;
display AP_C_0;
display cte_18;
display cte_19;
display AP_C_1;
display constant3;
display cte_20;
display cte_21;
display AP_B_0;
display cte_22;
display cte_23;
display AP_B_1;
display constant4;
display cte_24;
display cte_25;
display Lat_comm;
display transfer_A_total;
display transfer_D_total;
display transfer_tmp_total;
display transfer_C_total;
display transfer_B_total;
display transfer_A_S1_under_loop2;
display burst_A_S1_under_loop2;
display transfer_A_S1_under_loop4;
display burst_A_S1_under_loop4;
display transfer_D_S2_under_loop5;
display burst_D_S2_under_loop5;
display transfer_D_S2_under_loop6;
display burst_D_S2_under_loop6;
display transfer_D_S3_under_loop7;
display burst_D_S3_under_loop7;
display transfer_D_S3_under_loop8;
display burst_D_S3_under_loop8;
display transfer_tmp_S0_under_loop0;
display burst_tmp_S0_under_loop0;
display transfer_tmp_S0_under_loop1;
display burst_tmp_S0_under_loop1;
display transfer_tmp_S1_under_loop2;
display burst_tmp_S1_under_loop2;
display transfer_tmp_S1_under_loop3;
display burst_tmp_S1_under_loop3;
display transfer_tmp_S3_under_loop7;
display burst_tmp_S3_under_loop7;
display transfer_tmp_S3_under_loop9;
display burst_tmp_S3_under_loop9;
display transfer_C_S3_under_loop8;
display burst_C_S3_under_loop8;
display transfer_C_S3_under_loop9;
display burst_C_S3_under_loop9;
display transfer_B_S1_under_loop3;
display burst_B_S1_under_loop3;
display transfer_B_S1_under_loop4;
display burst_B_S1_under_loop4;
display burst_size_A;
display cte_burst_size_A;
display is_burst_size_A_16;
display is_burst_size_A_8;
display is_burst_size_A_4;
display is_burst_size_A_2;
display is_burst_size_A_1;
display burst_size_D;
display cte_burst_size_D;
display is_burst_size_D_16;
display is_burst_size_D_8;
display is_burst_size_D_4;
display is_burst_size_D_2;
display is_burst_size_D_1;
display burst_size_tmp;
display cte_burst_size_tmp;
display is_burst_size_tmp_16;
display is_burst_size_tmp_8;
display is_burst_size_tmp_4;
display is_burst_size_tmp_2;
display is_burst_size_tmp_1;
display burst_size_C;
display cte_burst_size_C;
display is_burst_size_C_16;
display is_burst_size_C_8;
display is_burst_size_C_4;
display is_burst_size_C_2;
display is_burst_size_C_1;
display burst_size_B;
display cte_burst_size_B;
display is_burst_size_B_16;
display is_burst_size_B_8;
display is_burst_size_B_4;
display is_burst_size_B_2;
display is_burst_size_B_1;
display Lat_comm_read_S0;;
display Lat_comm_write_S0;;
display Lat_comm_read_S1;;
display Lat_comm_write_S1;;
display Lat_comm_read_S2;;
display Lat_comm_write_S2;;
display Lat_comm_read_S3;;
display Lat_comm_write_S3;;
display ceil0;
display ceil1;
display ceil2;
display ceil3;
display ceil4;
display ceil5;
display ceil6;
display ceil7;
display ceil8;
display _total_solve_time;
